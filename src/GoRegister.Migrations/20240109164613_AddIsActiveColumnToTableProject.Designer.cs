// <auto-generated />
using System;
using GoRegister.ApplicationCore.Data;
using GoRegister.ApplicationCore.Data.Enums;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GoRegister.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240109164613_AddIsActiveColumnToTableProject")]
    partial class AddIsActiveColumnToTableProject
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.AnonSessionBooking", b =>
                {
                    b.Property<int>("SessionId")
                        .HasColumnType("int");

                    b.Property<string>("AnonUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ActionedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateActionedUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateReleasedUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("SessionId", "AnonUserId");

                    b.ToTable("AnonSessionBooking");
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DateFormat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TimeZone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("ProjectId");

                    b.HasIndex("NormalizedUserName", "ProjectId")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL AND [ProjectId] IS NOT NULL");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f3b1c4b1-58eb-44d3-b4cc-e056497ecb41",
                            Email = "WEBMASTER@BANKS-SADLER.COM",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "WEBMASTER@BANKS-SADLER.COM",
                            NormalizedUserName = "WEBMASTER@BANKS-SADLER.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENTqaCsPfY+yzMM9JpOlju4NPEc4xxsKjOAx03ALXyTmKOJGnBYTovXbQdaKH45eXQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d810c323-217a-45fd-a5a8-8eba550e85ad",
                            TwoFactorEnabled = false,
                            UserName = "WEBMASTER@BANKS-SADLER.COM"
                        });
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.BulkUpload", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUploadedUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("BulkUpload");
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClientUuid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Client");
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.ClientEmail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientEmail");
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.Country", b =>
                {
                    b.Property<string>("ISO")
                        .HasColumnType("nvarchar(2)")
                        .HasMaxLength(2);

                    b.Property<string>("ISO3")
                        .IsRequired()
                        .HasColumnType("nvarchar(3)")
                        .HasMaxLength(3);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Numeric")
                        .HasColumnType("int");

                    b.HasKey("ISO");

                    b.ToTable("Country");

                    b.HasData(
                        new
                        {
                            ISO = "AD",
                            ISO3 = "AND",
                            Name = "Andorra",
                            Numeric = 20
                        },
                        new
                        {
                            ISO = "AE",
                            ISO3 = "ARE",
                            Name = "United Arab Emirates",
                            Numeric = 784
                        },
                        new
                        {
                            ISO = "AF",
                            ISO3 = "AFG",
                            Name = "Afghanistan",
                            Numeric = 4
                        },
                        new
                        {
                            ISO = "AG",
                            ISO3 = "ATG",
                            Name = "Antigua and Barbuda",
                            Numeric = 28
                        },
                        new
                        {
                            ISO = "AI",
                            ISO3 = "AIA",
                            Name = "Anguilla",
                            Numeric = 660
                        },
                        new
                        {
                            ISO = "AL",
                            ISO3 = "ALB",
                            Name = "Albania",
                            Numeric = 8
                        },
                        new
                        {
                            ISO = "AM",
                            ISO3 = "ARM",
                            Name = "Armenia",
                            Numeric = 51
                        },
                        new
                        {
                            ISO = "AO",
                            ISO3 = "AGO",
                            Name = "Angola",
                            Numeric = 24
                        },
                        new
                        {
                            ISO = "AQ",
                            ISO3 = "ATA",
                            Name = "Antarctica",
                            Numeric = 10
                        },
                        new
                        {
                            ISO = "AR",
                            ISO3 = "ARG",
                            Name = "Argentina",
                            Numeric = 32
                        },
                        new
                        {
                            ISO = "AS",
                            ISO3 = "ASM",
                            Name = "American Samoa",
                            Numeric = 16
                        },
                        new
                        {
                            ISO = "AT",
                            ISO3 = "AUT",
                            Name = "Austria",
                            Numeric = 40
                        },
                        new
                        {
                            ISO = "AU",
                            ISO3 = "AUS",
                            Name = "Australia",
                            Numeric = 36
                        },
                        new
                        {
                            ISO = "AW",
                            ISO3 = "ABW",
                            Name = "Aruba",
                            Numeric = 533
                        },
                        new
                        {
                            ISO = "AX",
                            ISO3 = "ALA",
                            Name = "Åland Islands",
                            Numeric = 248
                        },
                        new
                        {
                            ISO = "AZ",
                            ISO3 = "AZE",
                            Name = "Azerbaijan",
                            Numeric = 31
                        },
                        new
                        {
                            ISO = "BA",
                            ISO3 = "BIH",
                            Name = "Bosnia and Herzegovina",
                            Numeric = 70
                        },
                        new
                        {
                            ISO = "BB",
                            ISO3 = "BRB",
                            Name = "Barbados",
                            Numeric = 52
                        },
                        new
                        {
                            ISO = "BD",
                            ISO3 = "BGD",
                            Name = "Bangladesh",
                            Numeric = 50
                        },
                        new
                        {
                            ISO = "BE",
                            ISO3 = "BEL",
                            Name = "Belgium",
                            Numeric = 56
                        },
                        new
                        {
                            ISO = "BF",
                            ISO3 = "BFA",
                            Name = "Burkina Faso",
                            Numeric = 854
                        },
                        new
                        {
                            ISO = "BG",
                            ISO3 = "BGR",
                            Name = "Bulgaria",
                            Numeric = 100
                        },
                        new
                        {
                            ISO = "BH",
                            ISO3 = "BHR",
                            Name = "Bahrain",
                            Numeric = 48
                        },
                        new
                        {
                            ISO = "BI",
                            ISO3 = "BDI",
                            Name = "Burundi",
                            Numeric = 108
                        },
                        new
                        {
                            ISO = "BJ",
                            ISO3 = "BEN",
                            Name = "Benin",
                            Numeric = 204
                        },
                        new
                        {
                            ISO = "BL",
                            ISO3 = "BLM",
                            Name = "Saint Barthélemy",
                            Numeric = 652
                        },
                        new
                        {
                            ISO = "BM",
                            ISO3 = "BMU",
                            Name = "Bermuda",
                            Numeric = 60
                        },
                        new
                        {
                            ISO = "BN",
                            ISO3 = "BRN",
                            Name = "Brunei Darussalam",
                            Numeric = 96
                        },
                        new
                        {
                            ISO = "BO",
                            ISO3 = "BOL",
                            Name = "Bolivia",
                            Numeric = 68
                        },
                        new
                        {
                            ISO = "BQ",
                            ISO3 = "BES",
                            Name = "Bonaire, Sint Eustatius and Saba",
                            Numeric = 535
                        },
                        new
                        {
                            ISO = "BR",
                            ISO3 = "BRA",
                            Name = "Brazil",
                            Numeric = 76
                        },
                        new
                        {
                            ISO = "BS",
                            ISO3 = "BHS",
                            Name = "Bahamas",
                            Numeric = 44
                        },
                        new
                        {
                            ISO = "BT",
                            ISO3 = "BTN",
                            Name = "Bhutan",
                            Numeric = 64
                        },
                        new
                        {
                            ISO = "BV",
                            ISO3 = "BVT",
                            Name = "Bouvet Island",
                            Numeric = 74
                        },
                        new
                        {
                            ISO = "BW",
                            ISO3 = "BWA",
                            Name = "Botswana",
                            Numeric = 72
                        },
                        new
                        {
                            ISO = "BY",
                            ISO3 = "BLR",
                            Name = "Belarus",
                            Numeric = 112
                        },
                        new
                        {
                            ISO = "BZ",
                            ISO3 = "BLZ",
                            Name = "Belize",
                            Numeric = 84
                        },
                        new
                        {
                            ISO = "CA",
                            ISO3 = "CAN",
                            Name = "Canada",
                            Numeric = 124
                        },
                        new
                        {
                            ISO = "CC",
                            ISO3 = "CCK",
                            Name = "Cocos (Keeling) Islands",
                            Numeric = 166
                        },
                        new
                        {
                            ISO = "CD",
                            ISO3 = "COD",
                            Name = "Congo, the Democratic Republic of the",
                            Numeric = 180
                        },
                        new
                        {
                            ISO = "CF",
                            ISO3 = "CAF",
                            Name = "Central African Republic",
                            Numeric = 140
                        },
                        new
                        {
                            ISO = "CG",
                            ISO3 = "COG",
                            Name = "Congo",
                            Numeric = 178
                        },
                        new
                        {
                            ISO = "CH",
                            ISO3 = "CHE",
                            Name = "Switzerland",
                            Numeric = 756
                        },
                        new
                        {
                            ISO = "CI",
                            ISO3 = "CIV",
                            Name = "Cote D'Ivoire",
                            Numeric = 384
                        },
                        new
                        {
                            ISO = "CK",
                            ISO3 = "COK",
                            Name = "Cook Islands",
                            Numeric = 184
                        },
                        new
                        {
                            ISO = "CL",
                            ISO3 = "CHL",
                            Name = "Chile",
                            Numeric = 152
                        },
                        new
                        {
                            ISO = "CM",
                            ISO3 = "CMR",
                            Name = "Cameroon",
                            Numeric = 120
                        },
                        new
                        {
                            ISO = "CN",
                            ISO3 = "CHN",
                            Name = "China",
                            Numeric = 156
                        },
                        new
                        {
                            ISO = "CO",
                            ISO3 = "COL",
                            Name = "Colombia",
                            Numeric = 170
                        },
                        new
                        {
                            ISO = "CR",
                            ISO3 = "CRI",
                            Name = "Costa Rica",
                            Numeric = 188
                        },
                        new
                        {
                            ISO = "CU",
                            ISO3 = "CUB",
                            Name = "Cuba",
                            Numeric = 192
                        },
                        new
                        {
                            ISO = "CV",
                            ISO3 = "CPV",
                            Name = "Cape Verde",
                            Numeric = 132
                        },
                        new
                        {
                            ISO = "CW",
                            ISO3 = "CUW",
                            Name = "Curaçao",
                            Numeric = 531
                        },
                        new
                        {
                            ISO = "CX",
                            ISO3 = "CXR",
                            Name = "Christmas Island",
                            Numeric = 162
                        },
                        new
                        {
                            ISO = "CY",
                            ISO3 = "CYP",
                            Name = "Cyprus",
                            Numeric = 196
                        },
                        new
                        {
                            ISO = "CZ",
                            ISO3 = "CZE",
                            Name = "Czech Republic",
                            Numeric = 203
                        },
                        new
                        {
                            ISO = "DE",
                            ISO3 = "DEU",
                            Name = "Germany",
                            Numeric = 276
                        },
                        new
                        {
                            ISO = "DJ",
                            ISO3 = "DJI",
                            Name = "Djibouti",
                            Numeric = 262
                        },
                        new
                        {
                            ISO = "DK",
                            ISO3 = "DNK",
                            Name = "Denmark",
                            Numeric = 208
                        },
                        new
                        {
                            ISO = "DM",
                            ISO3 = "DMA",
                            Name = "Dominica",
                            Numeric = 212
                        },
                        new
                        {
                            ISO = "DO",
                            ISO3 = "DOM",
                            Name = "Dominican Republic",
                            Numeric = 214
                        },
                        new
                        {
                            ISO = "DZ",
                            ISO3 = "DZA",
                            Name = "Algeria",
                            Numeric = 12
                        },
                        new
                        {
                            ISO = "EC",
                            ISO3 = "ECU",
                            Name = "Ecuador",
                            Numeric = 218
                        },
                        new
                        {
                            ISO = "EE",
                            ISO3 = "EST",
                            Name = "Estonia",
                            Numeric = 233
                        },
                        new
                        {
                            ISO = "EG",
                            ISO3 = "EGY",
                            Name = "Egypt",
                            Numeric = 818
                        },
                        new
                        {
                            ISO = "EH",
                            ISO3 = "ESH",
                            Name = "Western Sahara",
                            Numeric = 732
                        },
                        new
                        {
                            ISO = "ER",
                            ISO3 = "ERI",
                            Name = "Eritrea",
                            Numeric = 232
                        },
                        new
                        {
                            ISO = "ES",
                            ISO3 = "ESP",
                            Name = "Spain",
                            Numeric = 724
                        },
                        new
                        {
                            ISO = "ET",
                            ISO3 = "ETH",
                            Name = "Ethiopia",
                            Numeric = 231
                        },
                        new
                        {
                            ISO = "FI",
                            ISO3 = "FIN",
                            Name = "Finland",
                            Numeric = 246
                        },
                        new
                        {
                            ISO = "FJ",
                            ISO3 = "FJI",
                            Name = "Fiji",
                            Numeric = 242
                        },
                        new
                        {
                            ISO = "FK",
                            ISO3 = "FLK",
                            Name = "Falkland Islands (Malvinas)",
                            Numeric = 238
                        },
                        new
                        {
                            ISO = "FM",
                            ISO3 = "FSM",
                            Name = "Micronesia, Federated States of",
                            Numeric = 583
                        },
                        new
                        {
                            ISO = "FO",
                            ISO3 = "FRO",
                            Name = "Faroe Islands",
                            Numeric = 234
                        },
                        new
                        {
                            ISO = "FR",
                            ISO3 = "FRA",
                            Name = "France",
                            Numeric = 250
                        },
                        new
                        {
                            ISO = "GA",
                            ISO3 = "GAB",
                            Name = "Gabon",
                            Numeric = 266
                        },
                        new
                        {
                            ISO = "GB",
                            ISO3 = "GBR",
                            Name = "United Kingdom",
                            Numeric = 826
                        },
                        new
                        {
                            ISO = "GD",
                            ISO3 = "GRD",
                            Name = "Grenada",
                            Numeric = 308
                        },
                        new
                        {
                            ISO = "GE",
                            ISO3 = "GEO",
                            Name = "Georgia",
                            Numeric = 268
                        },
                        new
                        {
                            ISO = "GF",
                            ISO3 = "GUF",
                            Name = "French Guiana",
                            Numeric = 254
                        },
                        new
                        {
                            ISO = "GG",
                            ISO3 = "GGY",
                            Name = "Guernsey",
                            Numeric = 831
                        },
                        new
                        {
                            ISO = "GH",
                            ISO3 = "GHA",
                            Name = "Ghana",
                            Numeric = 288
                        },
                        new
                        {
                            ISO = "GI",
                            ISO3 = "GIB",
                            Name = "Gibraltar",
                            Numeric = 292
                        },
                        new
                        {
                            ISO = "GL",
                            ISO3 = "GRL",
                            Name = "Greenland",
                            Numeric = 304
                        },
                        new
                        {
                            ISO = "GM",
                            ISO3 = "GMB",
                            Name = "Gambia",
                            Numeric = 270
                        },
                        new
                        {
                            ISO = "GN",
                            ISO3 = "GIN",
                            Name = "Guinea",
                            Numeric = 324
                        },
                        new
                        {
                            ISO = "GP",
                            ISO3 = "GLP",
                            Name = "Guadeloupe",
                            Numeric = 312
                        },
                        new
                        {
                            ISO = "GQ",
                            ISO3 = "GNQ",
                            Name = "Equatorial Guinea",
                            Numeric = 226
                        },
                        new
                        {
                            ISO = "GR",
                            ISO3 = "GRC",
                            Name = "Greece",
                            Numeric = 300
                        },
                        new
                        {
                            ISO = "GS",
                            ISO3 = "SGS",
                            Name = "South Georgia and the South Sandwich Islands",
                            Numeric = 239
                        },
                        new
                        {
                            ISO = "GT",
                            ISO3 = "GTM",
                            Name = "Guatemala",
                            Numeric = 320
                        },
                        new
                        {
                            ISO = "GU",
                            ISO3 = "GUM",
                            Name = "Guam",
                            Numeric = 316
                        },
                        new
                        {
                            ISO = "GW",
                            ISO3 = "GNB",
                            Name = "Guinea-Bissau",
                            Numeric = 624
                        },
                        new
                        {
                            ISO = "GY",
                            ISO3 = "GUY",
                            Name = "Guyana",
                            Numeric = 328
                        },
                        new
                        {
                            ISO = "HK",
                            ISO3 = "HKG",
                            Name = "Hong Kong",
                            Numeric = 344
                        },
                        new
                        {
                            ISO = "HM",
                            ISO3 = "HMD",
                            Name = "Heard Island and Mcdonald Islands",
                            Numeric = 334
                        },
                        new
                        {
                            ISO = "HN",
                            ISO3 = "HND",
                            Name = "Honduras",
                            Numeric = 340
                        },
                        new
                        {
                            ISO = "HR",
                            ISO3 = "HRV",
                            Name = "Croatia",
                            Numeric = 191
                        },
                        new
                        {
                            ISO = "HT",
                            ISO3 = "HTI",
                            Name = "Haiti",
                            Numeric = 332
                        },
                        new
                        {
                            ISO = "HU",
                            ISO3 = "HUN",
                            Name = "Hungary",
                            Numeric = 348
                        },
                        new
                        {
                            ISO = "ID",
                            ISO3 = "IDN",
                            Name = "Indonesia",
                            Numeric = 360
                        },
                        new
                        {
                            ISO = "IE",
                            ISO3 = "IRL",
                            Name = "Ireland",
                            Numeric = 372
                        },
                        new
                        {
                            ISO = "IL",
                            ISO3 = "ISR",
                            Name = "Israel",
                            Numeric = 376
                        },
                        new
                        {
                            ISO = "IM",
                            ISO3 = "IMN",
                            Name = "Isle of Man",
                            Numeric = 833
                        },
                        new
                        {
                            ISO = "IN",
                            ISO3 = "IND",
                            Name = "India",
                            Numeric = 356
                        },
                        new
                        {
                            ISO = "IO",
                            ISO3 = "IOT",
                            Name = "British Indian Ocean Territory",
                            Numeric = 86
                        },
                        new
                        {
                            ISO = "IQ",
                            ISO3 = "IRQ",
                            Name = "Iraq",
                            Numeric = 368
                        },
                        new
                        {
                            ISO = "IR",
                            ISO3 = "IRN",
                            Name = "Iran, Islamic Republic of",
                            Numeric = 364
                        },
                        new
                        {
                            ISO = "IS",
                            ISO3 = "ISL",
                            Name = "Iceland",
                            Numeric = 352
                        },
                        new
                        {
                            ISO = "IT",
                            ISO3 = "ITA",
                            Name = "Italy",
                            Numeric = 380
                        },
                        new
                        {
                            ISO = "JE",
                            ISO3 = "JEY",
                            Name = "Jersey",
                            Numeric = 832
                        },
                        new
                        {
                            ISO = "JM",
                            ISO3 = "JAM",
                            Name = "Jamaica",
                            Numeric = 388
                        },
                        new
                        {
                            ISO = "JO",
                            ISO3 = "JOR",
                            Name = "Jordan",
                            Numeric = 400
                        },
                        new
                        {
                            ISO = "JP",
                            ISO3 = "JPN",
                            Name = "Japan",
                            Numeric = 392
                        },
                        new
                        {
                            ISO = "KE",
                            ISO3 = "KEN",
                            Name = "Kenya",
                            Numeric = 404
                        },
                        new
                        {
                            ISO = "KG",
                            ISO3 = "KGZ",
                            Name = "Kyrgyzstan",
                            Numeric = 417
                        },
                        new
                        {
                            ISO = "KH",
                            ISO3 = "KHM",
                            Name = "Cambodia",
                            Numeric = 116
                        },
                        new
                        {
                            ISO = "KI",
                            ISO3 = "KIR",
                            Name = "Kiribati",
                            Numeric = 296
                        },
                        new
                        {
                            ISO = "KM",
                            ISO3 = "COM",
                            Name = "Comoros",
                            Numeric = 174
                        },
                        new
                        {
                            ISO = "KN",
                            ISO3 = "KNA",
                            Name = "Saint Kitts and Nevis",
                            Numeric = 659
                        },
                        new
                        {
                            ISO = "KP",
                            ISO3 = "PRK",
                            Name = "Korea, Democratic People's Republic of",
                            Numeric = 408
                        },
                        new
                        {
                            ISO = "KR",
                            ISO3 = "KOR",
                            Name = "Korea, Republic of",
                            Numeric = 410
                        },
                        new
                        {
                            ISO = "KW",
                            ISO3 = "KWT",
                            Name = "Kuwait",
                            Numeric = 414
                        },
                        new
                        {
                            ISO = "KY",
                            ISO3 = "CYM",
                            Name = "Cayman Islands",
                            Numeric = 136
                        },
                        new
                        {
                            ISO = "KZ",
                            ISO3 = "KAZ",
                            Name = "Kazakhstan",
                            Numeric = 398
                        },
                        new
                        {
                            ISO = "LA",
                            ISO3 = "LAO",
                            Name = "Lao People's Democratic Republic",
                            Numeric = 418
                        },
                        new
                        {
                            ISO = "LB",
                            ISO3 = "LBN",
                            Name = "Lebanon",
                            Numeric = 422
                        },
                        new
                        {
                            ISO = "LC",
                            ISO3 = "LCA",
                            Name = "Saint Lucia",
                            Numeric = 662
                        },
                        new
                        {
                            ISO = "LI",
                            ISO3 = "LIE",
                            Name = "Liechtenstein",
                            Numeric = 438
                        },
                        new
                        {
                            ISO = "LK",
                            ISO3 = "LKA",
                            Name = "Sri Lanka",
                            Numeric = 144
                        },
                        new
                        {
                            ISO = "LR",
                            ISO3 = "LBR",
                            Name = "Liberia",
                            Numeric = 430
                        },
                        new
                        {
                            ISO = "LS",
                            ISO3 = "LSO",
                            Name = "Lesotho",
                            Numeric = 426
                        },
                        new
                        {
                            ISO = "LT",
                            ISO3 = "LTU",
                            Name = "Lithuania",
                            Numeric = 440
                        },
                        new
                        {
                            ISO = "LU",
                            ISO3 = "LUX",
                            Name = "Luxembourg",
                            Numeric = 442
                        },
                        new
                        {
                            ISO = "LV",
                            ISO3 = "LVA",
                            Name = "Latvia",
                            Numeric = 428
                        },
                        new
                        {
                            ISO = "LY",
                            ISO3 = "LBY",
                            Name = "Libya",
                            Numeric = 434
                        },
                        new
                        {
                            ISO = "MA",
                            ISO3 = "MAR",
                            Name = "Morocco",
                            Numeric = 504
                        },
                        new
                        {
                            ISO = "MC",
                            ISO3 = "MCO",
                            Name = "Monaco",
                            Numeric = 492
                        },
                        new
                        {
                            ISO = "MD",
                            ISO3 = "MDA",
                            Name = "Moldova, Republic of",
                            Numeric = 498
                        },
                        new
                        {
                            ISO = "ME",
                            ISO3 = "MNE",
                            Name = "Montenegro",
                            Numeric = 499
                        },
                        new
                        {
                            ISO = "MF",
                            ISO3 = "MAF",
                            Name = "Saint Martin (French part)",
                            Numeric = 663
                        },
                        new
                        {
                            ISO = "MG",
                            ISO3 = "MDG",
                            Name = "Madagascar",
                            Numeric = 450
                        },
                        new
                        {
                            ISO = "MH",
                            ISO3 = "MHL",
                            Name = "Marshall Islands",
                            Numeric = 584
                        },
                        new
                        {
                            ISO = "MK",
                            ISO3 = "MKD",
                            Name = "Republic of North Macedonia",
                            Numeric = 807
                        },
                        new
                        {
                            ISO = "ML",
                            ISO3 = "MLI",
                            Name = "Mali",
                            Numeric = 466
                        },
                        new
                        {
                            ISO = "MM",
                            ISO3 = "MMR",
                            Name = "Myanmar",
                            Numeric = 104
                        },
                        new
                        {
                            ISO = "MN",
                            ISO3 = "MNG",
                            Name = "Mongolia",
                            Numeric = 496
                        },
                        new
                        {
                            ISO = "MO",
                            ISO3 = "MAC",
                            Name = "Macao",
                            Numeric = 446
                        },
                        new
                        {
                            ISO = "MP",
                            ISO3 = "MNP",
                            Name = "Northern Mariana Islands",
                            Numeric = 580
                        },
                        new
                        {
                            ISO = "MQ",
                            ISO3 = "MTQ",
                            Name = "Martinique",
                            Numeric = 474
                        },
                        new
                        {
                            ISO = "MR",
                            ISO3 = "MRT",
                            Name = "Mauritania",
                            Numeric = 478
                        },
                        new
                        {
                            ISO = "MS",
                            ISO3 = "MSR",
                            Name = "Montserrat",
                            Numeric = 500
                        },
                        new
                        {
                            ISO = "MT",
                            ISO3 = "MLT",
                            Name = "Malta",
                            Numeric = 470
                        },
                        new
                        {
                            ISO = "MU",
                            ISO3 = "MUS",
                            Name = "Mauritius",
                            Numeric = 480
                        },
                        new
                        {
                            ISO = "MV",
                            ISO3 = "MDV",
                            Name = "Maldives",
                            Numeric = 462
                        },
                        new
                        {
                            ISO = "MW",
                            ISO3 = "MWI",
                            Name = "Malawi",
                            Numeric = 454
                        },
                        new
                        {
                            ISO = "MX",
                            ISO3 = "MEX",
                            Name = "Mexico",
                            Numeric = 484
                        },
                        new
                        {
                            ISO = "MY",
                            ISO3 = "MYS",
                            Name = "Malaysia",
                            Numeric = 458
                        },
                        new
                        {
                            ISO = "MZ",
                            ISO3 = "MOZ",
                            Name = "Mozambique",
                            Numeric = 508
                        },
                        new
                        {
                            ISO = "NA",
                            ISO3 = "NAM",
                            Name = "Namibia",
                            Numeric = 516
                        },
                        new
                        {
                            ISO = "NC",
                            ISO3 = "NCL",
                            Name = "New Caledonia",
                            Numeric = 540
                        },
                        new
                        {
                            ISO = "NE",
                            ISO3 = "NER",
                            Name = "Niger",
                            Numeric = 562
                        },
                        new
                        {
                            ISO = "NF",
                            ISO3 = "NFK",
                            Name = "Norfolk Island",
                            Numeric = 574
                        },
                        new
                        {
                            ISO = "NG",
                            ISO3 = "NGA",
                            Name = "Nigeria",
                            Numeric = 566
                        },
                        new
                        {
                            ISO = "NI",
                            ISO3 = "NIC",
                            Name = "Nicaragua",
                            Numeric = 558
                        },
                        new
                        {
                            ISO = "NL",
                            ISO3 = "NLD",
                            Name = "Netherlands",
                            Numeric = 528
                        },
                        new
                        {
                            ISO = "NO",
                            ISO3 = "NOR",
                            Name = "Norway",
                            Numeric = 578
                        },
                        new
                        {
                            ISO = "NP",
                            ISO3 = "NPL",
                            Name = "Nepal",
                            Numeric = 524
                        },
                        new
                        {
                            ISO = "NR",
                            ISO3 = "NRU",
                            Name = "Nauru",
                            Numeric = 520
                        },
                        new
                        {
                            ISO = "NU",
                            ISO3 = "NIU",
                            Name = "Niue",
                            Numeric = 570
                        },
                        new
                        {
                            ISO = "NZ",
                            ISO3 = "NZL",
                            Name = "New Zealand",
                            Numeric = 554
                        },
                        new
                        {
                            ISO = "OM",
                            ISO3 = "OMN",
                            Name = "Oman",
                            Numeric = 512
                        },
                        new
                        {
                            ISO = "PA",
                            ISO3 = "PAN",
                            Name = "Panama",
                            Numeric = 591
                        },
                        new
                        {
                            ISO = "PE",
                            ISO3 = "PER",
                            Name = "Peru",
                            Numeric = 604
                        },
                        new
                        {
                            ISO = "PF",
                            ISO3 = "PYF",
                            Name = "French Polynesia",
                            Numeric = 258
                        },
                        new
                        {
                            ISO = "PG",
                            ISO3 = "PNG",
                            Name = "Papua New Guinea",
                            Numeric = 598
                        },
                        new
                        {
                            ISO = "PH",
                            ISO3 = "PHL",
                            Name = "Philippines",
                            Numeric = 608
                        },
                        new
                        {
                            ISO = "PK",
                            ISO3 = "PAK",
                            Name = "Pakistan",
                            Numeric = 586
                        },
                        new
                        {
                            ISO = "PL",
                            ISO3 = "POL",
                            Name = "Poland",
                            Numeric = 616
                        },
                        new
                        {
                            ISO = "PM",
                            ISO3 = "SPM",
                            Name = "Saint Pierre and Miquelon",
                            Numeric = 666
                        },
                        new
                        {
                            ISO = "PN",
                            ISO3 = "PCN",
                            Name = "Pitcairn",
                            Numeric = 612
                        },
                        new
                        {
                            ISO = "PR",
                            ISO3 = "PRI",
                            Name = "Puerto Rico",
                            Numeric = 630
                        },
                        new
                        {
                            ISO = "PS",
                            ISO3 = "PSE",
                            Name = "Palestine, State of",
                            Numeric = 275
                        },
                        new
                        {
                            ISO = "PT",
                            ISO3 = "PRT",
                            Name = "Portugal",
                            Numeric = 620
                        },
                        new
                        {
                            ISO = "PW",
                            ISO3 = "PLW",
                            Name = "Palau",
                            Numeric = 585
                        },
                        new
                        {
                            ISO = "PY",
                            ISO3 = "PRY",
                            Name = "Paraguay",
                            Numeric = 600
                        },
                        new
                        {
                            ISO = "QA",
                            ISO3 = "QAT",
                            Name = "Qatar",
                            Numeric = 634
                        },
                        new
                        {
                            ISO = "RE",
                            ISO3 = "REU",
                            Name = "Reunion",
                            Numeric = 638
                        },
                        new
                        {
                            ISO = "RO",
                            ISO3 = "ROU",
                            Name = "Romania",
                            Numeric = 642
                        },
                        new
                        {
                            ISO = "RS",
                            ISO3 = "SRB",
                            Name = "Serbia",
                            Numeric = 688
                        },
                        new
                        {
                            ISO = "RU",
                            ISO3 = "RUS",
                            Name = "Russian Federation",
                            Numeric = 643
                        },
                        new
                        {
                            ISO = "RW",
                            ISO3 = "RWA",
                            Name = "Rwanda",
                            Numeric = 646
                        },
                        new
                        {
                            ISO = "SA",
                            ISO3 = "SAU",
                            Name = "Saudi Arabia",
                            Numeric = 682
                        },
                        new
                        {
                            ISO = "SB",
                            ISO3 = "SLB",
                            Name = "Solomon Islands",
                            Numeric = 90
                        },
                        new
                        {
                            ISO = "SC",
                            ISO3 = "SYC",
                            Name = "Seychelles",
                            Numeric = 690
                        },
                        new
                        {
                            ISO = "SD",
                            ISO3 = "SDN",
                            Name = "Sudan",
                            Numeric = 736
                        },
                        new
                        {
                            ISO = "SE",
                            ISO3 = "SWE",
                            Name = "Sweden",
                            Numeric = 752
                        },
                        new
                        {
                            ISO = "SG",
                            ISO3 = "SGP",
                            Name = "Singapore",
                            Numeric = 702
                        },
                        new
                        {
                            ISO = "SH",
                            ISO3 = "SHN",
                            Name = "Saint Helena, Ascension and Tristan da Cunha",
                            Numeric = 654
                        },
                        new
                        {
                            ISO = "SI",
                            ISO3 = "SVN",
                            Name = "Slovenia",
                            Numeric = 705
                        },
                        new
                        {
                            ISO = "SJ",
                            ISO3 = "SJM",
                            Name = "Svalbard and Jan Mayen",
                            Numeric = 744
                        },
                        new
                        {
                            ISO = "SK",
                            ISO3 = "SVK",
                            Name = "Slovakia",
                            Numeric = 703
                        },
                        new
                        {
                            ISO = "SL",
                            ISO3 = "SLE",
                            Name = "Sierra Leone",
                            Numeric = 694
                        },
                        new
                        {
                            ISO = "SM",
                            ISO3 = "SMR",
                            Name = "San Marino",
                            Numeric = 674
                        },
                        new
                        {
                            ISO = "SN",
                            ISO3 = "SEN",
                            Name = "Senegal",
                            Numeric = 686
                        },
                        new
                        {
                            ISO = "SO",
                            ISO3 = "SOM",
                            Name = "Somalia",
                            Numeric = 706
                        },
                        new
                        {
                            ISO = "SR",
                            ISO3 = "SUR",
                            Name = "Suriname",
                            Numeric = 740
                        },
                        new
                        {
                            ISO = "SS",
                            ISO3 = "SSD",
                            Name = "South Sudan",
                            Numeric = 728
                        },
                        new
                        {
                            ISO = "ST",
                            ISO3 = "STP",
                            Name = "Sao Tome and Principe",
                            Numeric = 678
                        },
                        new
                        {
                            ISO = "SV",
                            ISO3 = "SLV",
                            Name = "El Salvador",
                            Numeric = 222
                        },
                        new
                        {
                            ISO = "SX",
                            ISO3 = "SXM",
                            Name = "Sint Maarten (Dutch part)",
                            Numeric = 534
                        },
                        new
                        {
                            ISO = "SY",
                            ISO3 = "SYR",
                            Name = "Syrian Arab Republic (the)",
                            Numeric = 760
                        },
                        new
                        {
                            ISO = "SZ",
                            ISO3 = "SWZ",
                            Name = "Swaziland",
                            Numeric = 748
                        },
                        new
                        {
                            ISO = "TC",
                            ISO3 = "TCA",
                            Name = "Turks and Caicos Islands",
                            Numeric = 796
                        },
                        new
                        {
                            ISO = "TD",
                            ISO3 = "TCD",
                            Name = "Chad",
                            Numeric = 148
                        },
                        new
                        {
                            ISO = "TF",
                            ISO3 = "ATF",
                            Name = "French Southern Territories",
                            Numeric = 260
                        },
                        new
                        {
                            ISO = "TG",
                            ISO3 = "TGO",
                            Name = "Togo",
                            Numeric = 768
                        },
                        new
                        {
                            ISO = "TH",
                            ISO3 = "THA",
                            Name = "Thailand",
                            Numeric = 764
                        },
                        new
                        {
                            ISO = "TJ",
                            ISO3 = "TJK",
                            Name = "Tajikistan",
                            Numeric = 762
                        },
                        new
                        {
                            ISO = "TK",
                            ISO3 = "TKL",
                            Name = "Tokelau",
                            Numeric = 772
                        },
                        new
                        {
                            ISO = "TL",
                            ISO3 = "TLS",
                            Name = "Timor-Leste",
                            Numeric = 626
                        },
                        new
                        {
                            ISO = "TM",
                            ISO3 = "TKM",
                            Name = "Turkmenistan",
                            Numeric = 795
                        },
                        new
                        {
                            ISO = "TN",
                            ISO3 = "TUN",
                            Name = "Tunisia",
                            Numeric = 788
                        },
                        new
                        {
                            ISO = "TO",
                            ISO3 = "TON",
                            Name = "Tonga",
                            Numeric = 776
                        },
                        new
                        {
                            ISO = "TR",
                            ISO3 = "TUR",
                            Name = "Turkey",
                            Numeric = 792
                        },
                        new
                        {
                            ISO = "TT",
                            ISO3 = "TTO",
                            Name = "Trinidad and Tobago",
                            Numeric = 780
                        },
                        new
                        {
                            ISO = "TV",
                            ISO3 = "TUV",
                            Name = "Tuvalu",
                            Numeric = 798
                        },
                        new
                        {
                            ISO = "TW",
                            ISO3 = "TWN",
                            Name = "Taiwan (Province of China)",
                            Numeric = 158
                        },
                        new
                        {
                            ISO = "TZ",
                            ISO3 = "TZA",
                            Name = "Tanzania, the United Republic of",
                            Numeric = 834
                        },
                        new
                        {
                            ISO = "UA",
                            ISO3 = "UKR",
                            Name = "Ukraine",
                            Numeric = 804
                        },
                        new
                        {
                            ISO = "UG",
                            ISO3 = "UGA",
                            Name = "Uganda",
                            Numeric = 800
                        },
                        new
                        {
                            ISO = "UM",
                            ISO3 = "UMI",
                            Name = "United States Minor Outlying Islands",
                            Numeric = 581
                        },
                        new
                        {
                            ISO = "US",
                            ISO3 = "USA",
                            Name = "United States",
                            Numeric = 840
                        },
                        new
                        {
                            ISO = "UY",
                            ISO3 = "URY",
                            Name = "Uruguay",
                            Numeric = 858
                        },
                        new
                        {
                            ISO = "UZ",
                            ISO3 = "UZB",
                            Name = "Uzbekistan",
                            Numeric = 860
                        },
                        new
                        {
                            ISO = "VA",
                            ISO3 = "VAT",
                            Name = "Holy See (Vatican City State)",
                            Numeric = 336
                        },
                        new
                        {
                            ISO = "VC",
                            ISO3 = "VCT",
                            Name = "Saint Vincent and the Grenadines",
                            Numeric = 670
                        },
                        new
                        {
                            ISO = "VE",
                            ISO3 = "VEN",
                            Name = "Venezuela",
                            Numeric = 862
                        },
                        new
                        {
                            ISO = "VG",
                            ISO3 = "VGB",
                            Name = "Virgin Islands (British)",
                            Numeric = 92
                        },
                        new
                        {
                            ISO = "VI",
                            ISO3 = "VIR",
                            Name = "Virgin Islands (U.S.)",
                            Numeric = 850
                        },
                        new
                        {
                            ISO = "VN",
                            ISO3 = "VNM",
                            Name = "Viet Nam",
                            Numeric = 704
                        },
                        new
                        {
                            ISO = "VU",
                            ISO3 = "VUT",
                            Name = "Vanuatu",
                            Numeric = 548
                        },
                        new
                        {
                            ISO = "WF",
                            ISO3 = "WLF",
                            Name = "Wallis and Futuna",
                            Numeric = 876
                        },
                        new
                        {
                            ISO = "WS",
                            ISO3 = "WSM",
                            Name = "Samoa",
                            Numeric = 882
                        },
                        new
                        {
                            ISO = "YE",
                            ISO3 = "YEM",
                            Name = "Yemen",
                            Numeric = 887
                        },
                        new
                        {
                            ISO = "YT",
                            ISO3 = "MYT",
                            Name = "Mayotte",
                            Numeric = 175
                        },
                        new
                        {
                            ISO = "ZA",
                            ISO3 = "ZAF",
                            Name = "South Africa",
                            Numeric = 710
                        },
                        new
                        {
                            ISO = "ZM",
                            ISO3 = "ZMB",
                            Name = "Zambia",
                            Numeric = 894
                        },
                        new
                        {
                            ISO = "ZW",
                            ISO3 = "ZWE",
                            Name = "Zimbabwe",
                            Numeric = 716
                        });
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.CustomPage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("bit");

                    b.Property<int>("PageType")
                        .HasColumnType("int");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectPageId")
                        .HasColumnType("int");

                    b.Property<string>("Slug")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ProjectPageId")
                        .IsUnique();

                    b.ToTable("CustomPage");
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.CustomPageAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomPageId")
                        .HasColumnType("int");

                    b.Property<bool>("PageStatus")
                        .HasColumnType("bit");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CustomPageId");

                    b.ToTable("CustomPageAudit");
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.CustomPageAuditRegistrationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomPageAuditId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomPageAuditId");

                    b.ToTable("CustomPageAuditRegistrationType");
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.CustomPageRegistrationStatus", b =>
                {
                    b.Property<int>("CustomPageId")
                        .HasColumnType("int");

                    b.Property<int>("RegistrationStatusId")
                        .HasColumnType("int");

                    b.HasKey("CustomPageId", "RegistrationStatusId");

                    b.HasIndex("RegistrationStatusId");

                    b.ToTable("CustomPageRegistrationStatus");
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.CustomPageRegistrationType", b =>
                {
                    b.Property<int>("CustomPageId")
                        .HasColumnType("int");

                    b.Property<int>("RegistrationTypeId")
                        .HasColumnType("int");

                    b.HasKey("CustomPageId", "RegistrationTypeId");

                    b.HasIndex("RegistrationTypeId");

                    b.ToTable("CustomPageRegistrationType");
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.CustomPageVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomPageId")
                        .HasColumnType("int");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("bit");

                    b.Property<string>("Slug")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomPageId");

                    b.ToTable("CustomPageVersion");
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.DataQuery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccessLinkId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Document")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ProjectId");

                    b.ToTable("DataQuery");
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.DelegateSessionBooking", b =>
                {
                    b.Property<int>("SessionId")
                        .HasColumnType("int");

                    b.Property<int>("DelegateUserId")
                        .HasColumnType("int");

                    b.Property<int>("ActionedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateActionedUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateReleasedUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("SessionId", "DelegateUserId");

                    b.HasIndex("DelegateUserId");

                    b.ToTable("DelegateSessionBooking");
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.DelegateUser", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("AcceptedPrivacyPolicy")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("AcceptedPrivacyPolicyDateUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("AttendeeNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CancellationDocument")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CancelledUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ConfirmedUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeclineDocument")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeclinedUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("InvitedUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsTest")
                        .HasColumnType("bit");

                    b.Property<string>("MRFClientResponse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MRFClientUserInvitationlink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ParentDelegateUserId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("RegistrationDocument")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RegistrationStatusId")
                        .HasColumnType("int");

                    b.Property<int>("RegistrationTypeId")
                        .HasColumnType("int");

                    b.Property<Guid>("UniqueIdentifier")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ParentDelegateUserId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("RegistrationStatusId");

                    b.HasIndex("RegistrationTypeId");

                    b.HasIndex("AttendeeNumber", "ProjectId")
                        .IsUnique()
                        .HasFilter("[AttendeeNumber] IS NOT NULL");

                    b.ToTable("DelegateUser");
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.DelegateUserAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ActionById")
                        .HasColumnType("int");

                    b.Property<int>("ActionedById")
                        .HasColumnType("int");

                    b.Property<int>("ActionedFrom")
                        .HasColumnType("int");

                    b.Property<DateTime>("ActionedUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int?>("RegistrationStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("RegistrationTypeId")
                        .HasColumnType("int");

                    b.Property<string>("RegistrationTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserFormResponseId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActionedById");

                    b.HasIndex("ProjectId");

                    b.HasIndex("RegistrationTypeId");

                    b.HasIndex("UserFormResponseId");

                    b.HasIndex("UserId");

                    b.ToTable("DelegateUserAudit");
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.Email", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Bcc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmailLayoutId")
                        .HasColumnType("int");

                    b.Property<int>("EmailType")
                        .HasColumnType("int");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmailLayoutId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Email");
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.EmailAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("BatchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Bcc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DelegateUserId")
                        .HasColumnType("int");

                    b.Property<int?>("EmailAuditBatchId")
                        .HasColumnType("int");

                    b.Property<int?>("EmailTemplateId")
                        .HasColumnType("int");

                    b.Property<string>("FromEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromEmailDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("To")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DelegateUserId");

                    b.HasIndex("EmailAuditBatchId");

                    b.HasIndex("EmailTemplateId");

                    b.ToTable("EmailAudit");
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.EmailAuditBatch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("BatchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateSentUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmailCount")
                        .HasColumnType("int");

                    b.Property<int?>("EmailId")
                        .HasColumnType("int");

                    b.Property<int>("EmailIssueCount")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("EmailId");

                    b.HasIndex("ProjectId");

                    b.ToTable("EmailAuditBatch");
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.EmailAuditNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AsmGroupId")
                        .HasColumnType("int");

                    b.Property<string>("Attempt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmailAuditId")
                        .HasColumnType("int");

                    b.Property<string>("EventType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ip")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Response")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SgEventId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SgMessageId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SmtpId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Tls")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserAgent")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmailAuditId");

                    b.ToTable("EmailAuditNotification");
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.EmailTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BodyHtml")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BodyText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmailId")
                        .HasColumnType("int");

                    b.Property<bool>("HasTextBody")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmailId");

                    b.HasIndex("ProjectId");

                    b.ToTable("EmailTemplate");
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.EmailTemplateRegistrationType", b =>
                {
                    b.Property<int>("EmailTemplateId")
                        .HasColumnType("int");

                    b.Property<int>("RegistrationTypeId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("EmailTemplateId", "RegistrationTypeId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("RegistrationTypeId");

                    b.ToTable("EmailTemplateRegistrationType");
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.Emails.EmailLayout", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Html")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("EmailLayout");
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.Field", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("AllowTPNCountries")
                        .HasColumnType("bit");

                    b.Property<bool>("CanModify")
                        .HasColumnType("bit");

                    b.Property<string>("Class")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Cols")
                        .HasColumnType("int");

                    b.Property<string>("DataTag")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DefaultValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FieldTypeId")
                        .HasColumnType("int");

                    b.Property<string>("HelpTextAfter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HelpTextBefore")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HelpTextToolTip")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMandatory")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReadOnly")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsStandardField")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int?>("RegistrationPageId")
                        .HasColumnType("int");

                    b.Property<string>("ReportingHeader")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<Guid>("UniqueIdentifier")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ValidationName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("RegistrationPageId");

                    b.ToTable("Field");

                    b.HasDiscriminator<int>("FieldTypeId");
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.FieldOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdditionalInformation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdditionalInformation1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdditionalInformation2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Attributes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("Class")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DataTag")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FieldId")
                        .HasColumnType("int");

                    b.Property<string>("InternalInformation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("ReportingTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("ProjectId");

                    b.ToTable("FieldOption");
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.FieldOptionRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FieldOptionId")
                        .HasColumnType("int");

                    b.Property<int?>("NextFieldId")
                        .HasColumnType("int");

                    b.Property<int?>("NextFieldOptionId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FieldOptionId");

                    b.HasIndex("NextFieldId");

                    b.HasIndex("NextFieldOptionId");

                    b.HasIndex("ProjectId");

                    b.ToTable("FieldOptionRule");
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.Form", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdminDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FormTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsReviewPageHidden")
                        .HasColumnType("bit");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("SubmitButtonText")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Form");
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.MRFClientRequest", b =>
                {
                    b.Property<int>("ClientuniqueID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClientID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientUuid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MRFClientStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("deletedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ClientuniqueID");

                    b.ToTable("MRFClientRequest");
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.MRFClientRequestCountry", b =>
                {
                    b.Property<int>("CountryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClientuniqueID")
                        .HasColumnType("int");

                    b.Property<string>("CountryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Countryguid")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CountryID");

                    b.HasIndex("ClientuniqueID");

                    b.ToTable("MRFClientRequestCountry");
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.MRFClientResponseDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("APIErrorCode")
                        .HasColumnType("int");

                    b.Property<bool?>("AllowTPNCountries")
                        .HasColumnType("bit");

                    b.Property<string>("ClientGUID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientUserResponse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientUserResponseWithID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("CopyToReport")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DateTimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<int>("FormId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SendTPNEmailDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserGUID")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MRFClientResponseDetails");
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.MRFSysConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("MRFKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MRFKeyVal")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MRFSysConfig");
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.MenuItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AnchorLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CssClass")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CustomPageId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FormId")
                        .HasColumnType("int");

                    b.Property<int?>("FormType")
                        .HasColumnType("int");

                    b.Property<string>("Fragment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Label")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MenuItemType")
                        .HasColumnType("int");

                    b.Property<bool>("OpenInNewTab")
                        .HasColumnType("bit");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomPageId");

                    b.HasIndex("FormId");

                    b.HasIndex("ProjectId");

                    b.ToTable("MenuItem");
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.MenuItemRegistrationType", b =>
                {
                    b.Property<int>("MenuItemId")
                        .HasColumnType("int");

                    b.Property<int>("RegistrationTypeId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("MenuItemId", "RegistrationTypeId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("RegistrationTypeId");

                    b.ToTable("MenuItemRegistrationType");
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AllowAnonymousAccess")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowDuplicateEmails")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ArchiveDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("BlockSearchEngineIndexing")
                        .HasColumnType("bit");

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DeleteDataDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailDisplayFrom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailReplyTo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExternalReference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Host")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsSitewidePasswordEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("MetaDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PageTitleTag")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prefix")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectResourceId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectType")
                        .HasColumnType("int");

                    b.Property<string>("SitewidePasswordHashed")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SitewidePasswordPlainText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("Timezone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UniqueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.ProjectPage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MenuPosition")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectPage");
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.ProjectTheme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateArchived")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("FooterHtml")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FooterScripts")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HeadScripts")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HeaderHtml")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomepageHtml")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<string>("LayoutName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OverrideCss")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("ThemeCss")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ThemeGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ThemeUniqueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ThemeVariableObject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThemeVariables")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectTheme");
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.RecentProject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateVisited")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("RecentProject");
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.RegistrationPage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FormId")
                        .HasColumnType("int");

                    b.Property<bool>("IsInternalOnly")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("bit");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UniqueIdentifier")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FormId");

                    b.HasIndex("ProjectId");

                    b.ToTable("RegistrationPage");
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.RegistrationPageRegistrationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("RegistrationPageId")
                        .HasColumnType("int");

                    b.Property<int>("RegistrationTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("RegistrationPageId");

                    b.HasIndex("RegistrationTypeId");

                    b.ToTable("RegistrationPageRegistrationType");
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.RegistrationPath", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("CanCancel")
                        .HasColumnType("bit");

                    b.Property<bool>("CanDecline")
                        .HasColumnType("bit");

                    b.Property<bool>("CanModify")
                        .HasColumnType("bit");

                    b.Property<string>("CancelledText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConfirmedText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCancelTo")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeclineTo")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModifyTo")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateRegistrationFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateRegistrationTo")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeclinedText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InvitedText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NotInvitedText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("UseCreatedById")
                        .HasColumnType("int");

                    b.Property<string>("WaitingText")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("RegistrationPath");
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.RegistrationStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RegistrationStatus");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Description = "Not Invited"
                        },
                        new
                        {
                            Id = 1,
                            Description = "Invited"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Confirmed"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Declined"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Cancelled"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Waiting"
                        });
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.RegistrationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Capacity")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("RegistrationPathId")
                        .HasColumnType("int");

                    b.Property<int>("UserCreatedById")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("RegistrationPathId");

                    b.ToTable("RegistrationType");
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.RegistrationTypeField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FieldId")
                        .HasColumnType("int");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInternalOnly")
                        .HasColumnType("bit");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("RegistrationTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("RegistrationTypeId");

                    b.ToTable("RegistrationTypeField");
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.Session", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<int>("CapacityReserved")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCloseRegistrationUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateEndUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateStartUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsOptional")
                        .HasColumnType("bit");

                    b.Property<string>("MeetingLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MeetingPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("OpenForRegistration")
                        .HasColumnType("bit");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int?>("SessionCategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SessionCategoryId");

                    b.ToTable("Session");
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.SessionCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsSingleSession")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("SessionCategory");
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.SessionFieldCategory", b =>
                {
                    b.Property<int>("SessionFieldId")
                        .HasColumnType("int");

                    b.Property<int>("SessionCategoryId")
                        .HasColumnType("int");

                    b.HasKey("SessionFieldId", "SessionCategoryId");

                    b.HasIndex("SessionCategoryId");

                    b.ToTable("SessionFieldCategory");
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.SessionRegistrationType", b =>
                {
                    b.Property<int>("SessionId")
                        .HasColumnType("int");

                    b.Property<int>("RegistrationTypeId")
                        .HasColumnType("int");

                    b.HasKey("SessionId", "RegistrationTypeId");

                    b.HasIndex("RegistrationTypeId");

                    b.ToTable("SessionRegistrationType");
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.TPNCountryAdminMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AdminUserId")
                        .HasColumnType("int");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("ClientUuid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("GAMEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<int>("ReportFrequency")
                        .HasColumnType("int");

                    b.Property<string>("TPNCountry")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("ModifiedByUserId");

                    b.ToTable("TPNCountryAdminMapping");
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.TPNCountryClientEmail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("ClientUuid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("TPNCountry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TPNEmail")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("TPNCountryClientEmail");
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.TPNReportDataStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsSendFortNightly")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSendMonthly")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSendWeekly")
                        .HasColumnType("bit");

                    b.Property<int>("MRFClientResponseDetailsId")
                        .HasColumnType("int");

                    b.Property<int>("TPNReportDetailsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("TPNReportDataStatus");
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.TPNReportDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("ClientName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientUuid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactFirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactLastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DepartureDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Destination")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FormDateTimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("GBTClient")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MRFFormName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MRFResponseDetailsId")
                        .HasColumnType("int");

                    b.Property<string>("TPNCountry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TPNSharedMailbox")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TPNReportDetails");
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.TPNReportRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("ClientUuid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DownloadPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GAMEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReportFrequency")
                        .HasColumnType("int");

                    b.Property<int>("ReportStatusId")
                        .HasColumnType("int");

                    b.Property<string>("ReportType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RequestedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("RequestedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TPNCountry")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("TPNReportRequest");
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.TenantUrl", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("DisallowedSubDomains")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Host")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsSubdomainHost")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("TenantUrl");
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.ThemeFont", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FontType")
                        .HasColumnType("int");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectThemeId")
                        .HasColumnType("int");

                    b.Property<string>("Variants")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ProjectThemeId");

                    b.ToTable("ThemeFont");
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.UserAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActionType")
                        .HasColumnType("int");

                    b.Property<string>("Data")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserAction");
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.UserFieldResponse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("BooleanValue")
                        .HasColumnType("bit");

                    b.Property<string>("CountryId")
                        .HasColumnType("nvarchar(2)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateTimeValue")
                        .HasColumnType("datetime2");

                    b.Property<int>("FieldId")
                        .HasColumnType("int");

                    b.Property<int?>("FieldOptionId")
                        .HasColumnType("int");

                    b.Property<int?>("NumberValue")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("StringValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserFormResponseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("FieldId");

                    b.HasIndex("FieldOptionId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserFormResponseId");

                    b.ToTable("UserFieldResponse");
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.UserFieldResponseAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("BooleanValue")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DateTimeValue")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DelegateUserAuditId")
                        .HasColumnType("int");

                    b.Property<int>("FieldId")
                        .HasColumnType("int");

                    b.Property<int?>("FieldOptionId")
                        .HasColumnType("int");

                    b.Property<int?>("NumberValue")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("StringValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DelegateUserAuditId");

                    b.HasIndex("FieldId");

                    b.HasIndex("FieldOptionId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("UserFieldResponseAudit");
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.UserFormResponse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("FormId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FormId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("UserFormResponse");
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.UserProjectMapping", b =>
                {
                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ProjectId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserProjectMapping");
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "4f58402a-1951-4e2b-85cc-53ee0fbd2131",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "5c537e38-9b4d-4354-89da-fab33dd47c28",
                            Name = "DigitalServices",
                            NormalizedName = "DIGITALSERVICES"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = "b4ed5c30-2ad6-40e7-86f0-79369ccbcf2c",
                            Name = "MeetingPlanner",
                            NormalizedName = "MEETINGPLANNER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaim");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaim");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogin");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserToken");
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.CountryField", b =>
                {
                    b.HasBaseType("GoRegister.ApplicationCore.Data.Models.Field");

                    b.HasDiscriminator().HasValue(15);
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.DateField", b =>
                {
                    b.HasBaseType("GoRegister.ApplicationCore.Data.Models.Field");

                    b.Property<int>("PickerType")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue(5);
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.EmailField", b =>
                {
                    b.HasBaseType("GoRegister.ApplicationCore.Data.Models.Field");

                    b.HasDiscriminator().HasValue(6);
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.Fields.MRFDestinationField", b =>
                {
                    b.HasBaseType("GoRegister.ApplicationCore.Data.Models.Field");

                    b.HasDiscriminator().HasValue(17);
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.Fields.MRFServicingCountryField", b =>
                {
                    b.HasBaseType("GoRegister.ApplicationCore.Data.Models.Field");

                    b.HasDiscriminator().HasValue(18);
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.FirstNameField", b =>
                {
                    b.HasBaseType("GoRegister.ApplicationCore.Data.Models.Field");

                    b.HasDiscriminator().HasValue(7);
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.HeaderField", b =>
                {
                    b.HasBaseType("GoRegister.ApplicationCore.Data.Models.Field");

                    b.HasDiscriminator().HasValue(12);
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.HorizontalRuleField", b =>
                {
                    b.HasBaseType("GoRegister.ApplicationCore.Data.Models.Field");

                    b.HasDiscriminator().HasValue(11);
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.HtmlField", b =>
                {
                    b.HasBaseType("GoRegister.ApplicationCore.Data.Models.Field");

                    b.HasDiscriminator().HasValue(14);
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.LastNameField", b =>
                {
                    b.HasBaseType("GoRegister.ApplicationCore.Data.Models.Field");

                    b.HasDiscriminator().HasValue(8);
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.SessionField", b =>
                {
                    b.HasBaseType("GoRegister.ApplicationCore.Data.Models.Field");

                    b.Property<bool>("HideFullSessions")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue(16);
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.SingleSelectField", b =>
                {
                    b.HasBaseType("GoRegister.ApplicationCore.Data.Models.Field");

                    b.Property<int>("SingleSelectType")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.SubHeaderField", b =>
                {
                    b.HasBaseType("GoRegister.ApplicationCore.Data.Models.Field");

                    b.HasDiscriminator().HasValue(13);
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.TelephoneField", b =>
                {
                    b.HasBaseType("GoRegister.ApplicationCore.Data.Models.Field");

                    b.HasDiscriminator().HasValue(10);
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.TextAreaField", b =>
                {
                    b.HasBaseType("GoRegister.ApplicationCore.Data.Models.Field");

                    b.Property<string>("Placeholder")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue(4);
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.TextField", b =>
                {
                    b.HasBaseType("GoRegister.ApplicationCore.Data.Models.Field");

                    b.Property<string>("InputType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Placeholder")
                        .HasColumnName("TextField_Placeholder")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.AnonSessionBooking", b =>
                {
                    b.HasOne("GoRegister.ApplicationCore.Data.Models.Session", "Session")
                        .WithMany("AnonSessionBookings")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.ApplicationUser", b =>
                {
                    b.HasOne("GoRegister.ApplicationCore.Data.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId");
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.BulkUpload", b =>
                {
                    b.HasOne("GoRegister.ApplicationCore.Data.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GoRegister.ApplicationCore.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.ClientEmail", b =>
                {
                    b.HasOne("GoRegister.ApplicationCore.Data.Models.Client", "Client")
                        .WithMany("ClientEmails")
                        .HasForeignKey("ClientId");
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.CustomPage", b =>
                {
                    b.HasOne("GoRegister.ApplicationCore.Data.Models.Project", "Project")
                        .WithMany("CustomPages")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GoRegister.ApplicationCore.Data.Models.ProjectPage", "ProjectPage")
                        .WithOne("CustomPage")
                        .HasForeignKey("GoRegister.ApplicationCore.Data.Models.CustomPage", "ProjectPageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.CustomPageAudit", b =>
                {
                    b.HasOne("GoRegister.ApplicationCore.Data.Models.CustomPage", "CustomPage")
                        .WithMany("CustomPageAudits")
                        .HasForeignKey("CustomPageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.CustomPageAuditRegistrationType", b =>
                {
                    b.HasOne("GoRegister.ApplicationCore.Data.Models.CustomPageAudit", "CustomPageAudit")
                        .WithMany("CustomPageAuditRegistrationTypes")
                        .HasForeignKey("CustomPageAuditId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.CustomPageRegistrationStatus", b =>
                {
                    b.HasOne("GoRegister.ApplicationCore.Data.Models.CustomPage", "CustomPage")
                        .WithMany("CustomPageRegistrationStatuses")
                        .HasForeignKey("CustomPageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GoRegister.ApplicationCore.Data.Models.RegistrationStatus", "RegistrationStatus")
                        .WithMany("CustomPageRegistrationStatuses")
                        .HasForeignKey("RegistrationStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.CustomPageRegistrationType", b =>
                {
                    b.HasOne("GoRegister.ApplicationCore.Data.Models.CustomPage", "CustomPage")
                        .WithMany("CustomPageRegistrationTypes")
                        .HasForeignKey("CustomPageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GoRegister.ApplicationCore.Data.Models.RegistrationType", "RegistrationType")
                        .WithMany("CustomPageRegistrationTypes")
                        .HasForeignKey("RegistrationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.CustomPageVersion", b =>
                {
                    b.HasOne("GoRegister.ApplicationCore.Data.Models.CustomPage", "CustomPage")
                        .WithMany("CustomPageVersions")
                        .HasForeignKey("CustomPageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.DataQuery", b =>
                {
                    b.HasOne("GoRegister.ApplicationCore.Data.Models.ApplicationUser", "CreatedBy")
                        .WithMany("DataQueries")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GoRegister.ApplicationCore.Data.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.DelegateSessionBooking", b =>
                {
                    b.HasOne("GoRegister.ApplicationCore.Data.Models.DelegateUser", "DelegateUser")
                        .WithMany("DelegateSessionBookings")
                        .HasForeignKey("DelegateUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GoRegister.ApplicationCore.Data.Models.Session", "Session")
                        .WithMany("DelegateSessionBookings")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.DelegateUser", b =>
                {
                    b.HasOne("GoRegister.ApplicationCore.Data.Models.ApplicationUser", "ApplicationUser")
                        .WithOne("DelegateUser")
                        .HasForeignKey("GoRegister.ApplicationCore.Data.Models.DelegateUser", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GoRegister.ApplicationCore.Data.Models.DelegateUser", "ParentDelegateUser")
                        .WithMany()
                        .HasForeignKey("ParentDelegateUserId");

                    b.HasOne("GoRegister.ApplicationCore.Data.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GoRegister.ApplicationCore.Data.Models.RegistrationStatus", "RegistrationStatus")
                        .WithMany()
                        .HasForeignKey("RegistrationStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GoRegister.ApplicationCore.Data.Models.RegistrationType", "RegistrationType")
                        .WithMany("DelegateUsers")
                        .HasForeignKey("RegistrationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.DelegateUserAudit", b =>
                {
                    b.HasOne("GoRegister.ApplicationCore.Data.Models.ApplicationUser", "ActionedBy")
                        .WithMany()
                        .HasForeignKey("ActionedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GoRegister.ApplicationCore.Data.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GoRegister.ApplicationCore.Data.Models.RegistrationType", "RegistrationType")
                        .WithMany()
                        .HasForeignKey("RegistrationTypeId");

                    b.HasOne("GoRegister.ApplicationCore.Data.Models.UserFormResponse", "UserFormResponse")
                        .WithMany()
                        .HasForeignKey("UserFormResponseId");

                    b.HasOne("GoRegister.ApplicationCore.Data.Models.DelegateUser", "DelegateUser")
                        .WithMany("Audits")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.Email", b =>
                {
                    b.HasOne("GoRegister.ApplicationCore.Data.Models.Emails.EmailLayout", "EmailLayout")
                        .WithMany()
                        .HasForeignKey("EmailLayoutId");

                    b.HasOne("GoRegister.ApplicationCore.Data.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.EmailAudit", b =>
                {
                    b.HasOne("GoRegister.ApplicationCore.Data.Models.DelegateUser", "DelegateUser")
                        .WithMany()
                        .HasForeignKey("DelegateUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("GoRegister.ApplicationCore.Data.Models.EmailAuditBatch", "EmailAuditBatch")
                        .WithMany("EmailAudits")
                        .HasForeignKey("EmailAuditBatchId");

                    b.HasOne("GoRegister.ApplicationCore.Data.Models.EmailTemplate", "EmailTemplate")
                        .WithMany()
                        .HasForeignKey("EmailTemplateId");
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.EmailAuditBatch", b =>
                {
                    b.HasOne("GoRegister.ApplicationCore.Data.Models.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GoRegister.ApplicationCore.Data.Models.Email", "Email")
                        .WithMany()
                        .HasForeignKey("EmailId");

                    b.HasOne("GoRegister.ApplicationCore.Data.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.EmailAuditNotification", b =>
                {
                    b.HasOne("GoRegister.ApplicationCore.Data.Models.EmailAudit", "EmailAudit")
                        .WithMany("EmailAuditNotifications")
                        .HasForeignKey("EmailAuditId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.EmailTemplate", b =>
                {
                    b.HasOne("GoRegister.ApplicationCore.Data.Models.Email", "Email")
                        .WithMany("EmailTemplates")
                        .HasForeignKey("EmailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GoRegister.ApplicationCore.Data.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.EmailTemplateRegistrationType", b =>
                {
                    b.HasOne("GoRegister.ApplicationCore.Data.Models.EmailTemplate", "EmailTemplate")
                        .WithMany("RegistrationTypes")
                        .HasForeignKey("EmailTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GoRegister.ApplicationCore.Data.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GoRegister.ApplicationCore.Data.Models.RegistrationType", "RegistrationType")
                        .WithMany()
                        .HasForeignKey("RegistrationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.Emails.EmailLayout", b =>
                {
                    b.HasOne("GoRegister.ApplicationCore.Data.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.Field", b =>
                {
                    b.HasOne("GoRegister.ApplicationCore.Data.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GoRegister.ApplicationCore.Data.Models.RegistrationPage", "RegistrationPage")
                        .WithMany("Fields")
                        .HasForeignKey("RegistrationPageId");
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.FieldOption", b =>
                {
                    b.HasOne("GoRegister.ApplicationCore.Data.Models.Field", "Field")
                        .WithMany("FieldOptions")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GoRegister.ApplicationCore.Data.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.FieldOptionRule", b =>
                {
                    b.HasOne("GoRegister.ApplicationCore.Data.Models.FieldOption", "FieldOption")
                        .WithMany("FieldOptionRules")
                        .HasForeignKey("FieldOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GoRegister.ApplicationCore.Data.Models.Field", "NextField")
                        .WithMany("FieldOptionRules")
                        .HasForeignKey("NextFieldId");

                    b.HasOne("GoRegister.ApplicationCore.Data.Models.FieldOption", "NextFieldOption")
                        .WithMany("NextFieldOptionRules")
                        .HasForeignKey("NextFieldOptionId");

                    b.HasOne("GoRegister.ApplicationCore.Data.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.Form", b =>
                {
                    b.HasOne("GoRegister.ApplicationCore.Data.Models.Project", "Project")
                        .WithMany("Forms")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.MRFClientRequestCountry", b =>
                {
                    b.HasOne("GoRegister.ApplicationCore.Data.Models.MRFClientRequest", "MRFClientRequest")
                        .WithMany("MRFClientRequestCountry")
                        .HasForeignKey("ClientuniqueID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.MenuItem", b =>
                {
                    b.HasOne("GoRegister.ApplicationCore.Data.Models.CustomPage", "CustomPage")
                        .WithMany("MenuItems")
                        .HasForeignKey("CustomPageId");

                    b.HasOne("GoRegister.ApplicationCore.Data.Models.Form", "Form")
                        .WithMany()
                        .HasForeignKey("FormId");

                    b.HasOne("GoRegister.ApplicationCore.Data.Models.Project", "Project")
                        .WithMany("MenuItems")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.MenuItemRegistrationType", b =>
                {
                    b.HasOne("GoRegister.ApplicationCore.Data.Models.MenuItem", "MenuItem")
                        .WithMany("MenuItemRegistrationTypes")
                        .HasForeignKey("MenuItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GoRegister.ApplicationCore.Data.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GoRegister.ApplicationCore.Data.Models.RegistrationType", "RegistrationType")
                        .WithMany()
                        .HasForeignKey("RegistrationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.Project", b =>
                {
                    b.HasOne("GoRegister.ApplicationCore.Data.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.HasOne("GoRegister.ApplicationCore.Data.Models.ApplicationUser", "CreatedByUser")
                        .WithMany("CreatedProjects")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.ProjectPage", b =>
                {
                    b.HasOne("GoRegister.ApplicationCore.Data.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.ProjectTheme", b =>
                {
                    b.HasOne("GoRegister.ApplicationCore.Data.Models.Project", "Project")
                        .WithMany("ProjectThemes")
                        .HasForeignKey("ProjectId");
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.RecentProject", b =>
                {
                    b.HasOne("GoRegister.ApplicationCore.Data.Models.Project", "Project")
                        .WithMany("RecentProjects")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GoRegister.ApplicationCore.Data.Models.ApplicationUser", "User")
                        .WithMany("RecentProjects")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.RegistrationPage", b =>
                {
                    b.HasOne("GoRegister.ApplicationCore.Data.Models.Form", "Form")
                        .WithMany("RegistrationPages")
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GoRegister.ApplicationCore.Data.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.RegistrationPageRegistrationType", b =>
                {
                    b.HasOne("GoRegister.ApplicationCore.Data.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GoRegister.ApplicationCore.Data.Models.RegistrationPage", "RegistrationPage")
                        .WithMany("RegistrationPageRegistrationTypes")
                        .HasForeignKey("RegistrationPageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GoRegister.ApplicationCore.Data.Models.RegistrationType", "RegistrationType")
                        .WithMany("RegistrationPageRegistrationTypes")
                        .HasForeignKey("RegistrationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.RegistrationPath", b =>
                {
                    b.HasOne("GoRegister.ApplicationCore.Data.Models.Project", "Project")
                        .WithMany("RegistrationPaths")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.RegistrationType", b =>
                {
                    b.HasOne("GoRegister.ApplicationCore.Data.Models.Project", "Project")
                        .WithMany("RegistrationTypes")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GoRegister.ApplicationCore.Data.Models.RegistrationPath", "RegistrationPath")
                        .WithMany("RegistrationTypes")
                        .HasForeignKey("RegistrationPathId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.RegistrationTypeField", b =>
                {
                    b.HasOne("GoRegister.ApplicationCore.Data.Models.Field", "Field")
                        .WithMany("RegistrationTypeFields")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GoRegister.ApplicationCore.Data.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GoRegister.ApplicationCore.Data.Models.RegistrationType", "RegistrationType")
                        .WithMany("RegistrationTypeFields")
                        .HasForeignKey("RegistrationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.Session", b =>
                {
                    b.HasOne("GoRegister.ApplicationCore.Data.Models.Project", "Project")
                        .WithMany("Sessions")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GoRegister.ApplicationCore.Data.Models.SessionCategory", "SessionCategory")
                        .WithMany("Sessions")
                        .HasForeignKey("SessionCategoryId");
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.SessionCategory", b =>
                {
                    b.HasOne("GoRegister.ApplicationCore.Data.Models.Project", "Project")
                        .WithMany("SessionCategories")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.SessionFieldCategory", b =>
                {
                    b.HasOne("GoRegister.ApplicationCore.Data.Models.SessionCategory", "SessionCategory")
                        .WithMany("SessionFieldCategories")
                        .HasForeignKey("SessionCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GoRegister.ApplicationCore.Data.Models.SessionField", "SessionField")
                        .WithMany("SessionFieldCategories")
                        .HasForeignKey("SessionFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.SessionRegistrationType", b =>
                {
                    b.HasOne("GoRegister.ApplicationCore.Data.Models.RegistrationType", "RegistrationType")
                        .WithMany("SessionRegistrationTypes")
                        .HasForeignKey("RegistrationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GoRegister.ApplicationCore.Data.Models.Session", "Session")
                        .WithMany("SessionRegistrationTypes")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.TPNCountryAdminMapping", b =>
                {
                    b.HasOne("GoRegister.ApplicationCore.Data.Models.Client", "Client")
                        .WithMany("TPNCountryAdminMappings")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GoRegister.ApplicationCore.Data.Models.ApplicationUser", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId");
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.TPNCountryClientEmail", b =>
                {
                    b.HasOne("GoRegister.ApplicationCore.Data.Models.Client", "Client")
                        .WithMany("TPNCountryClientEmails")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.TPNReportRequest", b =>
                {
                    b.HasOne("GoRegister.ApplicationCore.Data.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.TenantUrl", b =>
                {
                    b.HasOne("GoRegister.ApplicationCore.Data.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.ThemeFont", b =>
                {
                    b.HasOne("GoRegister.ApplicationCore.Data.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GoRegister.ApplicationCore.Data.Models.ProjectTheme", "ProjectTheme")
                        .WithMany("Fonts")
                        .HasForeignKey("ProjectThemeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.UserAction", b =>
                {
                    b.HasOne("GoRegister.ApplicationCore.Data.Models.ApplicationUser", "User")
                        .WithMany("UserActions")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.UserFieldResponse", b =>
                {
                    b.HasOne("GoRegister.ApplicationCore.Data.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("GoRegister.ApplicationCore.Data.Models.Field", "Field")
                        .WithMany("UserFieldResponses")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GoRegister.ApplicationCore.Data.Models.FieldOption", "FieldOption")
                        .WithMany("UserFieldResponses")
                        .HasForeignKey("FieldOptionId");

                    b.HasOne("GoRegister.ApplicationCore.Data.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GoRegister.ApplicationCore.Data.Models.UserFormResponse", "UserFormResponse")
                        .WithMany("UserFieldResponses")
                        .HasForeignKey("UserFormResponseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.UserFieldResponseAudit", b =>
                {
                    b.HasOne("GoRegister.ApplicationCore.Data.Models.DelegateUserAudit", null)
                        .WithMany("UserFieldResponseAudits")
                        .HasForeignKey("DelegateUserAuditId");

                    b.HasOne("GoRegister.ApplicationCore.Data.Models.Field", "Field")
                        .WithMany("UserFieldResponseAudits")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GoRegister.ApplicationCore.Data.Models.FieldOption", "FieldOption")
                        .WithMany("UserFieldResponseAudits")
                        .HasForeignKey("FieldOptionId");

                    b.HasOne("GoRegister.ApplicationCore.Data.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GoRegister.ApplicationCore.Data.Models.DelegateUser", "DelegateUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.UserFormResponse", b =>
                {
                    b.HasOne("GoRegister.ApplicationCore.Data.Models.Form", "Form")
                        .WithMany()
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GoRegister.ApplicationCore.Data.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GoRegister.ApplicationCore.Data.Models.DelegateUser", "DelegateUser")
                        .WithMany("UserFormResponses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GoRegister.ApplicationCore.Data.Models.UserProjectMapping", b =>
                {
                    b.HasOne("GoRegister.ApplicationCore.Data.Models.Project", "Project")
                        .WithMany("UserProjectMapping")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GoRegister.ApplicationCore.Data.Models.ApplicationUser", "User")
                        .WithMany("UserProjectMapping")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("GoRegister.ApplicationCore.Data.Models.UserRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("GoRegister.ApplicationCore.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("GoRegister.ApplicationCore.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("GoRegister.ApplicationCore.Data.Models.UserRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GoRegister.ApplicationCore.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("GoRegister.ApplicationCore.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
