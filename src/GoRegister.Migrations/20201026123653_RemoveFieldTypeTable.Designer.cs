// <auto-generated />
using System;
using GoRegister.ApplicationCore.Data;
using GoRegister.ApplicationCore.Data.Enums;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GoRegister.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20201026123653_RemoveFieldTypeTable")]
    partial class RemoveFieldTypeTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("GoRegister.Data.Models.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DateFormat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TimeZone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("ProjectId");

                    b.HasIndex("NormalizedUserName", "ProjectId")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL AND [ProjectId] IS NOT NULL");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8fc8adb3-b935-4571-9d9b-b47531c89d6e",
                            Email = "WEBMASTER@BANKS-SADLER.COM",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "WEBMASTER@BANKS-SADLER.COM",
                            NormalizedUserName = "WEBMASTER@BANKS-SADLER.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEB9ke4qZaJeLbQ7qju8LsQI9Jhlcyj8/lpe5E4KWAH0/Zy5JBQlAhqwprmCXpNRPAQ==",
                            PhoneNumberConfirmed = false,
                            ProjectId = 1,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "WEBMASTER@BANKS-SADLER.COM"
                        });
                });

            modelBuilder.Entity("GoRegister.Data.Models.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Client");
                });

            modelBuilder.Entity("GoRegister.Data.Models.CustomPage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("bit");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectPageId")
                        .HasColumnType("int");

                    b.Property<string>("Slug")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ProjectPageId")
                        .IsUnique();

                    b.ToTable("CustomPage");
                });

            modelBuilder.Entity("GoRegister.Data.Models.CustomPageAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomPageId")
                        .HasColumnType("int");

                    b.Property<bool>("PageStatus")
                        .HasColumnType("bit");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CustomPageId");

                    b.ToTable("CustomPageAudit");
                });

            modelBuilder.Entity("GoRegister.Data.Models.CustomPageAuditRegistrationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomPageAuditId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomPageAuditId");

                    b.ToTable("CustomPageAuditRegistrationType");
                });

            modelBuilder.Entity("GoRegister.Data.Models.CustomPageRegistrationStatus", b =>
                {
                    b.Property<int>("CustomPageId")
                        .HasColumnType("int");

                    b.Property<int>("RegistrationStatusId")
                        .HasColumnType("int");

                    b.HasKey("CustomPageId", "RegistrationStatusId");

                    b.HasIndex("RegistrationStatusId");

                    b.ToTable("CustomPageRegistrationStatus");
                });

            modelBuilder.Entity("GoRegister.Data.Models.CustomPageRegistrationType", b =>
                {
                    b.Property<int>("CustomPageId")
                        .HasColumnType("int");

                    b.Property<int>("RegistrationTypeId")
                        .HasColumnType("int");

                    b.HasKey("CustomPageId", "RegistrationTypeId");

                    b.HasIndex("RegistrationTypeId");

                    b.ToTable("CustomPageRegistrationType");
                });

            modelBuilder.Entity("GoRegister.Data.Models.CustomPageVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomPageId")
                        .HasColumnType("int");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("bit");

                    b.Property<string>("Slug")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomPageId");

                    b.ToTable("CustomPageVersion");
                });

            modelBuilder.Entity("GoRegister.Data.Models.DelegateUser", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("CancelledDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CancelledUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ConfirmedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ConfirmedUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DeclinedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeclinedUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("InvitedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("InvitedUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ParentDelegateUserId")
                        .HasColumnType("int");

                    b.Property<string>("RegistrationDocument")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RegistrationStatusId")
                        .HasColumnType("int");

                    b.Property<int>("RegistrationTypeId")
                        .HasColumnType("int");

                    b.Property<Guid>("UniqueIdentifier")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ParentDelegateUserId");

                    b.HasIndex("RegistrationStatusId");

                    b.HasIndex("RegistrationTypeId");

                    b.ToTable("DelegateUser");
                });

            modelBuilder.Entity("GoRegister.Data.Models.DelegateUserAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ActionById")
                        .HasColumnType("int");

                    b.Property<int?>("ActionedById")
                        .HasColumnType("int");

                    b.Property<int>("ActionedFrom")
                        .HasColumnType("int");

                    b.Property<DateTime>("ActionedUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int?>("RegistrationStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("RegistrationTypeId")
                        .HasColumnType("int");

                    b.Property<string>("RegistrationTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActionedById");

                    b.HasIndex("ProjectId");

                    b.HasIndex("RegistrationTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("DelegateUserAudit");
                });

            modelBuilder.Entity("GoRegister.Data.Models.EmailAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("BatchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Bcc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DelegateUserId")
                        .HasColumnType("int");

                    b.Property<int?>("EmailTemplateId")
                        .HasColumnType("int");

                    b.Property<string>("FromEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromEmailDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("To")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DelegateUserId");

                    b.HasIndex("EmailTemplateId");

                    b.ToTable("EmailAudit");
                });

            modelBuilder.Entity("GoRegister.Data.Models.EmailAuditBatch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("BatchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateSent")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmailSentCount")
                        .HasColumnType("int");

                    b.Property<string>("EmailType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("EmailAuditBatch");
                });

            modelBuilder.Entity("GoRegister.Data.Models.EmailAuditNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AsmGroupId")
                        .HasColumnType("int");

                    b.Property<string>("Attempt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmailAuditId")
                        .HasColumnType("int");

                    b.Property<string>("EventType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ip")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Response")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SgEventId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SgMessageId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SmtpId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Tls")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserAgent")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmailAuditId");

                    b.ToTable("EmailAuditNotification");
                });

            modelBuilder.Entity("GoRegister.Data.Models.EmailTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Bcc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmailType")
                        .HasColumnType("int");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("RegistrationStatusId")
                        .HasColumnType("int");

                    b.Property<int>("RegistrationTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("RegistrationStatusId");

                    b.HasIndex("RegistrationTypeId");

                    b.ToTable("EmailTemplate");
                });

            modelBuilder.Entity("GoRegister.Data.Models.Field", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("CanModify")
                        .HasColumnType("bit");

                    b.Property<string>("Class")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Cols")
                        .HasColumnType("int");

                    b.Property<string>("DataTag")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DefaultValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FieldTypeId")
                        .HasColumnType("int");

                    b.Property<int>("FormId")
                        .HasColumnType("int");

                    b.Property<string>("HelpTextAfter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HelpTextBefore")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HelpTextToolTip")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMandatory")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReadOnly")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int?>("RegistrationPageId")
                        .HasColumnType("int");

                    b.Property<string>("ReportingHeader")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<Guid>("UniqueIdentifier")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ValidationName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FormId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("RegistrationPageId");

                    b.ToTable("Field");

                    b.HasDiscriminator<int>("FieldTypeId");
                });

            modelBuilder.Entity("GoRegister.Data.Models.FieldOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdditionalInformation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdditionalInformation1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdditionalInformation2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AgendaId")
                        .HasColumnType("int");

                    b.Property<string>("Attributes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("Class")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DataTag")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FieldId")
                        .HasColumnType("int");

                    b.Property<string>("InternalInformation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("ReportingTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<decimal?>("VisaAllowance")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("ProjectId");

                    b.ToTable("FieldOption");
                });

            modelBuilder.Entity("GoRegister.Data.Models.FieldOptionRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("FieldId")
                        .HasColumnType("int");

                    b.Property<int>("FieldOptionId")
                        .HasColumnType("int");

                    b.Property<int?>("NextFieldId")
                        .HasColumnType("int");

                    b.Property<int?>("NextFieldOptionId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("FieldOptionId");

                    b.HasIndex("NextFieldOptionId");

                    b.HasIndex("ProjectId");

                    b.ToTable("FieldOptionRule");
                });

            modelBuilder.Entity("GoRegister.Data.Models.Form", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FormTypeId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Form");
                });

            modelBuilder.Entity("GoRegister.Data.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Host")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prefix")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Project");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Host = "localhost:5021",
                            Name = "Admin",
                            Prefix = "admin"
                        });
                });

            modelBuilder.Entity("GoRegister.Data.Models.ProjectPage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MenuPosition")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectPage");
                });

            modelBuilder.Entity("GoRegister.Data.Models.ProjectSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ArchiveDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("BlockSearchEngineIndexing")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DeleteDataDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailDisplayFrom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailReplyTo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExternalReference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsLive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSitewidePasswordEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("MetaDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PageTitleTag")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectResourceId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SitewidePasswordHashed")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SitewidePasswordPlainText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Timezone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Project");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArchiveDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BlockSearchEngineIndexing = false,
                            DeleteDataDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsLive = false,
                            IsSitewidePasswordEnabled = false,
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("GoRegister.Data.Models.ProjectTheme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DateArchived")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("FooterScripts")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HeadScripts")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<string>("LayoutName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OverrideCss")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("ThemeCss")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ThemeGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ThemeVariableObject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThemeVariables")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectTheme");
                });

            modelBuilder.Entity("GoRegister.Data.Models.RegistrationPage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FormId")
                        .HasColumnType("int");

                    b.Property<bool>("IsInternalOnly")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("bit");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UniqueIdentifier")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FormId");

                    b.HasIndex("ProjectId");

                    b.ToTable("RegistrationPage");
                });

            modelBuilder.Entity("GoRegister.Data.Models.RegistrationPageRegistrationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("RegistrationPageId")
                        .HasColumnType("int");

                    b.Property<int>("RegistrationTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("RegistrationPageId");

                    b.HasIndex("RegistrationTypeId");

                    b.ToTable("RegistrationPageRegistrationType");
                });

            modelBuilder.Entity("GoRegister.Data.Models.RegistrationPath", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("CanCancel")
                        .HasColumnType("bit");

                    b.Property<bool>("CanModify")
                        .HasColumnType("bit");

                    b.Property<string>("CancelledText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConfirmedText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCancelTo")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModifyTo")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateRegistrationFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateRegistrationTo")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeclinedText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InvitedText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NotInvitedText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("UseCreatedById")
                        .HasColumnType("int");

                    b.Property<string>("WaitingText")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("RegistrationPath");
                });

            modelBuilder.Entity("GoRegister.Data.Models.RegistrationStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RegistrationStatus");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Description = "Not Invited"
                        },
                        new
                        {
                            Id = 1,
                            Description = "Invited"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Confirmed"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Declined"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Cancelled"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Waiting"
                        });
                });

            modelBuilder.Entity("GoRegister.Data.Models.RegistrationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Capacity")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("RegistrationPathId")
                        .HasColumnType("int");

                    b.Property<int>("UserCreatedById")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("RegistrationPathId");

                    b.ToTable("RegistrationType");
                });

            modelBuilder.Entity("GoRegister.Data.Models.RegistrationTypeField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FieldId")
                        .HasColumnType("int");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInternalOnly")
                        .HasColumnType("bit");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("RegistrationTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("RegistrationTypeId");

                    b.ToTable("RegistrationTypeField");
                });

            modelBuilder.Entity("GoRegister.Data.Models.TenantUrl", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("DisallowedSubDomains")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Host")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsSubdomainHost")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("TenantUrl");
                });

            modelBuilder.Entity("GoRegister.Data.Models.UserFieldResponse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("BooleanValue")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateTimeValue")
                        .HasColumnType("datetime2");

                    b.Property<int>("FieldId")
                        .HasColumnType("int");

                    b.Property<int?>("FieldOptionId")
                        .HasColumnType("int");

                    b.Property<int>("NumberValue")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("StringValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("FieldOptionId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("UserFieldResponse");
                });

            modelBuilder.Entity("GoRegister.Data.Models.UserFieldResponseAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("BooleanValue")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DateTimeValue")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DelegateUserAuditId")
                        .HasColumnType("int");

                    b.Property<int>("FieldId")
                        .HasColumnType("int");

                    b.Property<int?>("FieldOptionId")
                        .HasColumnType("int");

                    b.Property<int?>("NumberValue")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("StringValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DelegateUserAuditId");

                    b.HasIndex("FieldId");

                    b.HasIndex("FieldOptionId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("UserFieldResponseAudit");
                });

            modelBuilder.Entity("GoRegister.Data.Models.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "041eca7a-8000-430b-82df-33acc57c70ec",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaim");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaim");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogin");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserToken");
                });

            modelBuilder.Entity("GoRegister.Data.Models.DateField", b =>
                {
                    b.HasBaseType("GoRegister.Data.Models.Field");

                    b.HasDiscriminator().HasValue(5);
                });

            modelBuilder.Entity("GoRegister.Data.Models.EmailField", b =>
                {
                    b.HasBaseType("GoRegister.Data.Models.Field");

                    b.HasDiscriminator().HasValue(6);
                });

            modelBuilder.Entity("GoRegister.Data.Models.FirstNameField", b =>
                {
                    b.HasBaseType("GoRegister.Data.Models.Field");

                    b.HasDiscriminator().HasValue(7);
                });

            modelBuilder.Entity("GoRegister.Data.Models.HorizontalRuleField", b =>
                {
                    b.HasBaseType("GoRegister.Data.Models.Field");

                    b.HasDiscriminator().HasValue(11);
                });

            modelBuilder.Entity("GoRegister.Data.Models.LastNameField", b =>
                {
                    b.HasBaseType("GoRegister.Data.Models.Field");

                    b.HasDiscriminator().HasValue(8);
                });

            modelBuilder.Entity("GoRegister.Data.Models.SingleSelectField", b =>
                {
                    b.HasBaseType("GoRegister.Data.Models.Field");

                    b.Property<int>("SingleSelectType")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("GoRegister.Data.Models.TelephoneField", b =>
                {
                    b.HasBaseType("GoRegister.Data.Models.Field");

                    b.HasDiscriminator().HasValue(10);
                });

            modelBuilder.Entity("GoRegister.Data.Models.TextField", b =>
                {
                    b.HasBaseType("GoRegister.Data.Models.Field");

                    b.Property<string>("InputType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Placeholder")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("GoRegister.Data.Models.ApplicationUser", b =>
                {
                    b.HasOne("GoRegister.Data.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId");
                });

            modelBuilder.Entity("GoRegister.Data.Models.CustomPage", b =>
                {
                    b.HasOne("GoRegister.Data.Models.Project", "Project")
                        .WithMany("CustomPages")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GoRegister.Data.Models.ProjectPage", "ProjectPage")
                        .WithOne("CustomPage")
                        .HasForeignKey("GoRegister.Data.Models.CustomPage", "ProjectPageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GoRegister.Data.Models.CustomPageAudit", b =>
                {
                    b.HasOne("GoRegister.Data.Models.CustomPage", "CustomPage")
                        .WithMany("CustomPageAudits")
                        .HasForeignKey("CustomPageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GoRegister.Data.Models.CustomPageAuditRegistrationType", b =>
                {
                    b.HasOne("GoRegister.Data.Models.CustomPageAudit", "CustomPageAudit")
                        .WithMany("CustomPageAuditRegistrationTypes")
                        .HasForeignKey("CustomPageAuditId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GoRegister.Data.Models.CustomPageRegistrationStatus", b =>
                {
                    b.HasOne("GoRegister.Data.Models.CustomPage", "CustomPage")
                        .WithMany("CustomPageRegistrationStatuses")
                        .HasForeignKey("CustomPageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GoRegister.Data.Models.RegistrationStatus", "RegistrationStatus")
                        .WithMany("CustomPageRegistrationStatuses")
                        .HasForeignKey("RegistrationStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GoRegister.Data.Models.CustomPageRegistrationType", b =>
                {
                    b.HasOne("GoRegister.Data.Models.CustomPage", "CustomPage")
                        .WithMany("CustomPageRegistrationTypes")
                        .HasForeignKey("CustomPageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GoRegister.Data.Models.RegistrationType", "RegistrationType")
                        .WithMany("CustomPageRegistrationTypes")
                        .HasForeignKey("RegistrationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GoRegister.Data.Models.CustomPageVersion", b =>
                {
                    b.HasOne("GoRegister.Data.Models.CustomPage", "CustomPage")
                        .WithMany("CustomPageVersions")
                        .HasForeignKey("CustomPageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GoRegister.Data.Models.DelegateUser", b =>
                {
                    b.HasOne("GoRegister.Data.Models.ApplicationUser", "ApplicationUser")
                        .WithOne("DelegateUser")
                        .HasForeignKey("GoRegister.Data.Models.DelegateUser", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GoRegister.Data.Models.DelegateUser", "ParentDelegateUser")
                        .WithMany()
                        .HasForeignKey("ParentDelegateUserId");

                    b.HasOne("GoRegister.Data.Models.RegistrationStatus", "RegistrationStatus")
                        .WithMany()
                        .HasForeignKey("RegistrationStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GoRegister.Data.Models.RegistrationType", "RegistrationType")
                        .WithMany("DelegateUsers")
                        .HasForeignKey("RegistrationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GoRegister.Data.Models.DelegateUserAudit", b =>
                {
                    b.HasOne("GoRegister.Data.Models.ApplicationUser", "ActionedBy")
                        .WithMany()
                        .HasForeignKey("ActionedById");

                    b.HasOne("GoRegister.Data.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GoRegister.Data.Models.RegistrationType", "RegistrationType")
                        .WithMany()
                        .HasForeignKey("RegistrationTypeId");

                    b.HasOne("GoRegister.Data.Models.DelegateUser", "DelegateUser")
                        .WithMany("Audits")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GoRegister.Data.Models.EmailAudit", b =>
                {
                    b.HasOne("GoRegister.Data.Models.DelegateUser", "DelegateUser")
                        .WithMany()
                        .HasForeignKey("DelegateUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GoRegister.Data.Models.EmailTemplate", "EmailTemplate")
                        .WithMany()
                        .HasForeignKey("EmailTemplateId");
                });

            modelBuilder.Entity("GoRegister.Data.Models.EmailAuditBatch", b =>
                {
                    b.HasOne("GoRegister.Data.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("GoRegister.Data.Models.EmailAuditNotification", b =>
                {
                    b.HasOne("GoRegister.Data.Models.EmailAudit", "EmailAudit")
                        .WithMany("EmailAuditNotifications")
                        .HasForeignKey("EmailAuditId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GoRegister.Data.Models.EmailTemplate", b =>
                {
                    b.HasOne("GoRegister.Data.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GoRegister.Data.Models.RegistrationStatus", "RegistrationStatus")
                        .WithMany()
                        .HasForeignKey("RegistrationStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GoRegister.Data.Models.RegistrationType", "RegistrationType")
                        .WithMany()
                        .HasForeignKey("RegistrationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GoRegister.Data.Models.Field", b =>
                {
                    b.HasOne("GoRegister.Data.Models.Form", "Form")
                        .WithMany("Fields")
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GoRegister.Data.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GoRegister.Data.Models.RegistrationPage", "RegistrationPage")
                        .WithMany("Fields")
                        .HasForeignKey("RegistrationPageId");
                });

            modelBuilder.Entity("GoRegister.Data.Models.FieldOption", b =>
                {
                    b.HasOne("GoRegister.Data.Models.Field", "Field")
                        .WithMany("FieldOptions")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GoRegister.Data.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("GoRegister.Data.Models.FieldOptionRule", b =>
                {
                    b.HasOne("GoRegister.Data.Models.Field", "Field")
                        .WithMany("FieldOptionRules")
                        .HasForeignKey("FieldId");

                    b.HasOne("GoRegister.Data.Models.FieldOption", "FieldOption")
                        .WithMany("FieldOptionRules")
                        .HasForeignKey("FieldOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GoRegister.Data.Models.FieldOption", "NextFieldOption")
                        .WithMany("NextFieldOptionRules")
                        .HasForeignKey("NextFieldOptionId");

                    b.HasOne("GoRegister.Data.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("GoRegister.Data.Models.Form", b =>
                {
                    b.HasOne("GoRegister.Data.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("GoRegister.Data.Models.Project", b =>
                {
                    b.HasOne("GoRegister.Data.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");
                });

            modelBuilder.Entity("GoRegister.Data.Models.ProjectPage", b =>
                {
                    b.HasOne("GoRegister.Data.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("GoRegister.Data.Models.ProjectSettings", b =>
                {
                    b.HasOne("GoRegister.Data.Models.Project", "Project")
                        .WithOne("ProjectSettings")
                        .HasForeignKey("GoRegister.Data.Models.ProjectSettings", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GoRegister.Data.Models.ProjectTheme", b =>
                {
                    b.HasOne("GoRegister.Data.Models.Project", "Project")
                        .WithMany("ProjectThemes")
                        .HasForeignKey("ProjectId");
                });

            modelBuilder.Entity("GoRegister.Data.Models.RegistrationPage", b =>
                {
                    b.HasOne("GoRegister.Data.Models.Form", "Form")
                        .WithMany("RegistrationPages")
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GoRegister.Data.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("GoRegister.Data.Models.RegistrationPageRegistrationType", b =>
                {
                    b.HasOne("GoRegister.Data.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GoRegister.Data.Models.RegistrationPage", "RegistrationPage")
                        .WithMany("RegistrationPageRegistrationTypes")
                        .HasForeignKey("RegistrationPageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GoRegister.Data.Models.RegistrationType", "RegistrationType")
                        .WithMany("RegistrationPageRegistrationTypes")
                        .HasForeignKey("RegistrationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GoRegister.Data.Models.RegistrationPath", b =>
                {
                    b.HasOne("GoRegister.Data.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("GoRegister.Data.Models.RegistrationType", b =>
                {
                    b.HasOne("GoRegister.Data.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GoRegister.Data.Models.RegistrationPath", "RegistrationPath")
                        .WithMany("RegistrationTypes")
                        .HasForeignKey("RegistrationPathId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GoRegister.Data.Models.RegistrationTypeField", b =>
                {
                    b.HasOne("GoRegister.Data.Models.Field", "Field")
                        .WithMany("RegistrationTypeFields")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GoRegister.Data.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GoRegister.Data.Models.RegistrationType", "RegistrationType")
                        .WithMany("RegistrationTypeFields")
                        .HasForeignKey("RegistrationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GoRegister.Data.Models.TenantUrl", b =>
                {
                    b.HasOne("GoRegister.Data.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");
                });

            modelBuilder.Entity("GoRegister.Data.Models.UserFieldResponse", b =>
                {
                    b.HasOne("GoRegister.Data.Models.Field", "Field")
                        .WithMany()
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GoRegister.Data.Models.FieldOption", "FieldOption")
                        .WithMany()
                        .HasForeignKey("FieldOptionId");

                    b.HasOne("GoRegister.Data.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GoRegister.Data.Models.DelegateUser", "DelegateUser")
                        .WithMany("UserFieldResponses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GoRegister.Data.Models.UserFieldResponseAudit", b =>
                {
                    b.HasOne("GoRegister.Data.Models.DelegateUserAudit", null)
                        .WithMany("UserFieldResponseAudits")
                        .HasForeignKey("DelegateUserAuditId");

                    b.HasOne("GoRegister.Data.Models.Field", "Field")
                        .WithMany()
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GoRegister.Data.Models.FieldOption", "FieldOption")
                        .WithMany()
                        .HasForeignKey("FieldOptionId");

                    b.HasOne("GoRegister.Data.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GoRegister.Data.Models.DelegateUser", "DelegateUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("GoRegister.Data.Models.UserRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("GoRegister.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("GoRegister.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("GoRegister.Data.Models.UserRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GoRegister.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("GoRegister.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
