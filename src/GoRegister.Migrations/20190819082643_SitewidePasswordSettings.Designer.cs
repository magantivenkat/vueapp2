// <auto-generated />
using System;
using GoRegister.ApplicationCore.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GoRegister.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190819082643_SitewidePasswordSettings")]
    partial class SitewidePasswordSettings
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("GoRegister.Data.Models.ApplicationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "ea27adf7-1067-4b75-af3a-05358e4518bc",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        });
                });

            modelBuilder.Entity("GoRegister.Data.Models.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<int>("ProjectId");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("ProjectId");

                    b.HasIndex("NormalizedUserName", "ProjectId")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b96c0d11-40a5-482f-9746-10e69d610736",
                            Email = "WEBMASTER@BANKS-SADLER.COM",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "WEBMASTER@BANKS-SADLER.COM",
                            NormalizedUserName = "admin",
                            PasswordHash = "AQAAAAEAACcQAAAAEMNLkDObcyEmD8NLvbtsaeXbYGwe88gKlb2BPe6Z6bbtVAIN9yvG1KGvKZk1cZsVdQ==",
                            PhoneNumberConfirmed = false,
                            ProjectId = 1,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("GoRegister.Data.Models.CustomPage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content");

                    b.Property<int>("ProjectId");

                    b.Property<string>("Slug");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("CustomPage");
                });

            modelBuilder.Entity("GoRegister.Data.Models.DelegateUser", b =>
                {
                    b.Property<int>("Id");

                    b.Property<int>("InvitationListId");

                    b.Property<int?>("ParentDelegateUserId");

                    b.Property<int>("RegistrationTypeId");

                    b.HasKey("Id");

                    b.HasIndex("InvitationListId");

                    b.HasIndex("ParentDelegateUserId");

                    b.HasIndex("RegistrationTypeId");

                    b.ToTable("DelegateUser");
                });

            modelBuilder.Entity("GoRegister.Data.Models.Field", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApiFieldName");

                    b.Property<bool>("CanModify");

                    b.Property<string>("Class");

                    b.Property<string>("CustomAttributes");

                    b.Property<string>("DataTag");

                    b.Property<string>("DefaultValue");

                    b.Property<int>("FieldTypeId");

                    b.Property<string>("HelpTextToolTip");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsMandatory");

                    b.Property<bool>("IsReadOnly");

                    b.Property<int?>("MaxLength");

                    b.Property<int?>("MinLength");

                    b.Property<string>("Name");

                    b.Property<string>("Options");

                    b.Property<string>("Placeholder");

                    b.Property<string>("PreText");

                    b.Property<int>("ProjectId");

                    b.Property<int>("RegistrationPageId");

                    b.Property<string>("ReportingHeader");

                    b.Property<int>("SortOrder");

                    b.Property<string>("SubText");

                    b.Property<Guid>("UniqueIdentifier");

                    b.HasKey("Id");

                    b.HasIndex("FieldTypeId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("RegistrationPageId");

                    b.ToTable("Field");
                });

            modelBuilder.Entity("GoRegister.Data.Models.FieldOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdditionalInformation");

                    b.Property<string>("AdditionalInformation1");

                    b.Property<string>("AdditionalInformation2");

                    b.Property<int?>("AgendaId");

                    b.Property<string>("Attributes");

                    b.Property<int?>("Capacity");

                    b.Property<string>("Class");

                    b.Property<string>("DataTag");

                    b.Property<string>("Description");

                    b.Property<int>("FieldId");

                    b.Property<string>("InternalInformation");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ProjectId");

                    b.Property<string>("ReportingTitle");

                    b.Property<int>("SortOrder");

                    b.Property<decimal?>("VisaAllowance");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("ProjectId");

                    b.ToTable("FieldOption");
                });

            modelBuilder.Entity("GoRegister.Data.Models.FieldOptionRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("FieldId");

                    b.Property<int>("FieldOptionId");

                    b.Property<int?>("NextFieldId");

                    b.Property<int?>("NextFieldOptionId");

                    b.Property<int>("ProjectId");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("FieldOptionId");

                    b.HasIndex("NextFieldOptionId");

                    b.HasIndex("ProjectId");

                    b.ToTable("FieldOptionRule");
                });

            modelBuilder.Entity("GoRegister.Data.Models.FieldType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<bool>("IsForPresentation");

                    b.HasKey("Id");

                    b.ToTable("FieldType");
                });

            modelBuilder.Entity("GoRegister.Data.Models.InvitationList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<int>("ProjectId");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("InvitationList");
                });

            modelBuilder.Entity("GoRegister.Data.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Host");

                    b.Property<string>("Name");

                    b.Property<string>("Prefix");

                    b.HasKey("Id");

                    b.ToTable("Project");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Host = "localhost:5021",
                            Name = "Admin",
                            Prefix = "admin"
                        });
                });

            modelBuilder.Entity("GoRegister.Data.Models.ProjectSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("BlockSearchEngineIndexing");

                    b.Property<bool>("IsSitewidePasswordEnabled");

                    b.Property<string>("MetaDescription");

                    b.Property<string>("PageTitleTag");

                    b.Property<string>("SitewidePasswordHashed");

                    b.Property<string>("SitewidePasswordPlainText");

                    b.HasKey("Id");

                    b.ToTable("Project");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BlockSearchEngineIndexing = false,
                            IsSitewidePasswordEnabled = false
                        });
                });

            modelBuilder.Entity("GoRegister.Data.Models.RegistrationPage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<bool>("IsInternalOnly");

                    b.Property<int>("ProjectId");

                    b.Property<int>("SortOrder");

                    b.Property<string>("Title");

                    b.Property<Guid>("UniqueIdentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("RegistrationPage");
                });

            modelBuilder.Entity("GoRegister.Data.Models.RegistrationPageRegistrationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProjectId");

                    b.Property<int>("RegistrationPageId");

                    b.Property<int>("RegistrationTypeId");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("RegistrationPageId");

                    b.HasIndex("RegistrationTypeId");

                    b.ToTable("RegistrationPageRegistrationType");
                });

            modelBuilder.Entity("GoRegister.Data.Models.RegistrationPath", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("CanCancel");

                    b.Property<bool>("CanModify");

                    b.Property<string>("CancelledText");

                    b.Property<string>("ConfirmedText");

                    b.Property<DateTime?>("DateCancelTo");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateModifyTo");

                    b.Property<DateTime?>("DateRegistrationFrom");

                    b.Property<DateTime?>("DateRegistrationTo");

                    b.Property<string>("DeclinedText");

                    b.Property<string>("Description");

                    b.Property<string>("InvitedText");

                    b.Property<bool>("IsTesting");

                    b.Property<string>("Name");

                    b.Property<string>("NotInvitedText");

                    b.Property<int>("ProjectId");

                    b.Property<int>("UseCreatedById");

                    b.Property<string>("WaitingText");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("RegistrationPath");
                });

            modelBuilder.Entity("GoRegister.Data.Models.RegistrationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Capacity");

                    b.Property<DateTime>("DateCreated");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<int>("ProjectId");

                    b.Property<int>("RegistrationPathId");

                    b.Property<int>("UserCreatedById");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("RegistrationPathId");

                    b.ToTable("RegistrationType");
                });

            modelBuilder.Entity("GoRegister.Data.Models.RegistrationTypeField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FieldId");

                    b.Property<bool>("IsHidden");

                    b.Property<bool>("IsInternalOnly");

                    b.Property<int>("ProjectId");

                    b.Property<int>("RegistrationTypeId");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("RegistrationTypeId");

                    b.ToTable("RegistrationTypeField");
                });

            modelBuilder.Entity("GoRegister.Data.Models.UserFieldResponse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ApplicationUserId");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<int>("FieldId");

                    b.Property<int?>("FieldOptionId");

                    b.Property<int>("ProjectId");

                    b.Property<int>("UserId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("FieldId");

                    b.HasIndex("FieldOptionId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("UserFieldResponse");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaim");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaim");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<int>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogin");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserToken");
                });

            modelBuilder.Entity("GoRegister.Data.Models.ApplicationUser", b =>
                {
                    b.HasOne("GoRegister.Data.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("GoRegister.Data.Models.CustomPage", b =>
                {
                    b.HasOne("GoRegister.Data.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("GoRegister.Data.Models.DelegateUser", b =>
                {
                    b.HasOne("GoRegister.Data.Models.ApplicationUser", "ApplicationUser")
                        .WithOne("DelegateUser")
                        .HasForeignKey("GoRegister.Data.Models.DelegateUser", "Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GoRegister.Data.Models.InvitationList", "InvitationList")
                        .WithMany("Users")
                        .HasForeignKey("InvitationListId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GoRegister.Data.Models.DelegateUser", "ParentDelegateUser")
                        .WithMany()
                        .HasForeignKey("ParentDelegateUserId");

                    b.HasOne("GoRegister.Data.Models.RegistrationType", "RegistrationType")
                        .WithMany()
                        .HasForeignKey("RegistrationTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GoRegister.Data.Models.Field", b =>
                {
                    b.HasOne("GoRegister.Data.Models.FieldType", "FieldType")
                        .WithMany("Fields")
                        .HasForeignKey("FieldTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GoRegister.Data.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GoRegister.Data.Models.RegistrationPage", "RegistrationPage")
                        .WithMany("Fields")
                        .HasForeignKey("RegistrationPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GoRegister.Data.Models.FieldOption", b =>
                {
                    b.HasOne("GoRegister.Data.Models.Field", "Field")
                        .WithMany("FieldOptions")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GoRegister.Data.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("GoRegister.Data.Models.FieldOptionRule", b =>
                {
                    b.HasOne("GoRegister.Data.Models.Field", "Field")
                        .WithMany("FieldOptionRules")
                        .HasForeignKey("FieldId");

                    b.HasOne("GoRegister.Data.Models.FieldOption", "FieldOption")
                        .WithMany("FieldOptionRules")
                        .HasForeignKey("FieldOptionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GoRegister.Data.Models.FieldOption", "NextFieldOption")
                        .WithMany("NextFieldOptionRules")
                        .HasForeignKey("NextFieldOptionId");

                    b.HasOne("GoRegister.Data.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("GoRegister.Data.Models.InvitationList", b =>
                {
                    b.HasOne("GoRegister.Data.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("GoRegister.Data.Models.ProjectSettings", b =>
                {
                    b.HasOne("GoRegister.Data.Models.Project", "Project")
                        .WithOne("ProjectSettings")
                        .HasForeignKey("GoRegister.Data.Models.ProjectSettings", "Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GoRegister.Data.Models.RegistrationPage", b =>
                {
                    b.HasOne("GoRegister.Data.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("GoRegister.Data.Models.RegistrationPageRegistrationType", b =>
                {
                    b.HasOne("GoRegister.Data.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GoRegister.Data.Models.RegistrationPage", "RegistrationPage")
                        .WithMany("RegistrationPageRegistrationTypes")
                        .HasForeignKey("RegistrationPageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GoRegister.Data.Models.RegistrationType", "RegistrationType")
                        .WithMany("RegistrationPageRegistrationTypes")
                        .HasForeignKey("RegistrationTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GoRegister.Data.Models.RegistrationPath", b =>
                {
                    b.HasOne("GoRegister.Data.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("GoRegister.Data.Models.RegistrationType", b =>
                {
                    b.HasOne("GoRegister.Data.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GoRegister.Data.Models.RegistrationPath", "RegistrationPath")
                        .WithMany("RegistrationTypes")
                        .HasForeignKey("RegistrationPathId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GoRegister.Data.Models.RegistrationTypeField", b =>
                {
                    b.HasOne("GoRegister.Data.Models.Field", "Field")
                        .WithMany("RegistrationTypeFields")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GoRegister.Data.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GoRegister.Data.Models.RegistrationType", "RegistrationType")
                        .WithMany("RegistrationTypeFields")
                        .HasForeignKey("RegistrationTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GoRegister.Data.Models.UserFieldResponse", b =>
                {
                    b.HasOne("GoRegister.Data.Models.ApplicationUser")
                        .WithMany("UserFieldResponses")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("GoRegister.Data.Models.Field", "Field")
                        .WithMany()
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GoRegister.Data.Models.FieldOption", "FieldOption")
                        .WithMany()
                        .HasForeignKey("FieldOptionId");

                    b.HasOne("GoRegister.Data.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GoRegister.Data.Models.DelegateUser", "DelegateUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("GoRegister.Data.Models.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("GoRegister.Data.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("GoRegister.Data.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("GoRegister.Data.Models.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GoRegister.Data.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("GoRegister.Data.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
